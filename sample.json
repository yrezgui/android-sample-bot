{
 "items": [
  {
   "id": "android/animation-samples/ActivitySceneTransitionBasic",
   "title": "ActivitySceneTransitionBasic",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "ActivitySceneTransitionBasic/",
   "description": "This sample shows how to use scene transitions from one Activity to another in Lollipop. Uses a combination of changeImageTransform and changeBounds to transition a grid of images to an Activity with a large image and detail text.",
   "introduction": "<p>Android Lollipop has introduced the ability to transition between activities by using a shared element. This sample demonstrates how to do this using the theme of your application.</p>\n<p>See <a href=\"https://developer.android.com/training/material/animations.html#Transitions\">Defining Custom Animations</a> for all the details on how to do this.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/animation-samples/main/ActivitySceneTransitionBasic/screenshots/1-main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/animation-samples/main/ActivitySceneTransitionBasic/screenshots/2-transition.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/animation-samples/main/ActivitySceneTransitionBasic/screenshots/3-transition.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/animation-samples/main/ActivitySceneTransitionBasic/screenshots/4-detail.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.transition.Transition",
     "link": "https://developer.android.com/reference/android/transition/Transition.html"
    },
    {
     "namespace": "android",
     "name": "android.app.ActivityOptions",
     "link": "https://developer.android.com/reference/android/app/ActivityOptions.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1566941741000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/BasicTransition",
   "title": "BasicTransition",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "BasicTransition/",
   "description": "A basic app showing how to use the Transition framework introduced in KitKat. The app shows radioboxes to select between different Scenes, and uses various ways to transition between them.",
   "introduction": "<p>A Scene is an encapsulation of the state of a view hierarchy, including the views in that hierarchy and the various values (layout-related and otherwise) that those views have. A scene can be defined by a layout hierarchy directly or by code which sets up the scene dynamically as it is entered.</p>\n<p>A Transition is a mechanism to automatically animate changes that occur when a new scene is entered. Some transition capabilities are automatic. That is, entering a scene may cause animations to run which fade out views that go away, changeBounds and resize existing views that change, and fade in views that become visible. There are additional transitions that can animate other attributes, such as color changes, and which can optionally be specified to take place during particular scene changes. Finally, developers can define their own Transition subclasses which monitor particular property changes and which run custom animations when those properties change values.</p>\n<p>TransitionManager is used to specify custom transitions for particular scene changes, and to cause scene changes with specific transitions to take place.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/animation-samples/main/BasicTransition/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "Application/src/main/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.transition.TransitionManager",
     "link": "https://developer.android.com/reference/android/transition/TransitionManager.html"
    },
    {
     "namespace": "android",
     "name": "android.transition.Transition",
     "link": "https://developer.android.com/reference/android/transition/Transition.html"
    },
    {
     "namespace": "android",
     "name": "android.transition.Scene",
     "link": "https://developer.android.com/reference/android/transition/Scene.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1566864738000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/CustomTransition",
   "title": "CustomTransition",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "CustomTransition/",
   "description": "This sample shows how to implement a custom Transition extending the standard Transition class.",
   "introduction": "<p>In order to create a custom Transition, you first need to override <a href=\"https://developer.android.com/reference/android/transition/Transition.html#captureStartValues(android.transition.TransitionValues)\">captureStartValues</a> and <a href=\"https://developer.android.com/reference/android/transition/Transition.html#captureEndValues(android.transition.TransitionValues)\">captureEndValues</a>. In those method, you have to extract all the relevant properties from a View. These methods are called for each of the Views in the hierarchy.</p>\n<p>Then, you need to override [createAnimator][3] and create an Animator based on the property values you extracted. This method will also be called for each of the Views in the hierarchy. If you want to skip some Views, simply return null.</p>\n<p>The instantiated custom Transition can be applied by passing it as the second parameter of [TransitionManager.go][4].</p>\n<p><code>java TransitionManager.go(mScenes[mCurrentScene], mTransition); </code></p>\n<p>[3]: https://developer.android.com/reference/android/transition/Transition.html#createAnimator(android.view.ViewGroup, android.transition.TransitionValues, android.transition.TransitionValues) [4]: https://developer.android.com/reference/android/transition/TransitionManager.html#go(android.transition.Scene, android.transition.Transition)</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/animation-samples/main/CustomTransition/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.transition.TransitionManager",
     "link": "https://developer.android.com/reference/android/transition/TransitionManager.html"
    },
    {
     "namespace": "android",
     "name": "android.transition.Transition",
     "link": "https://developer.android.com/reference/android/transition/Transition.html"
    },
    {
     "namespace": "android",
     "name": "android.transition.Scene",
     "link": "https://developer.android.com/reference/android/transition/Scene.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1566864760000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/GridToPager",
   "title": "Fragment Transitions: RecyclerView to ViewPager",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "GridToPager/",
   "description": "This Android project accompanies the <a href=\"https://goo.gl/Txqtds\">Continuous Shared Element Transitions: RecyclerView to ViewPager</a> article.\nThe code here provides the implementation for a specific transition between Android Fragments. It demonstrates how to implement a transition from an image in a <code>RecyclerView</code> into an image in a <code>ViewPager</code> and back, using ‘Shared Elements’ to determine which views participate in the transition and how. It also handles the tricky case of transitioning back to the grid after paging to an item that was previously offscreen.\n<strong>This is not an officially supported Google product.</strong>",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.recyclerview.widget.RecyclerView",
     "link": "https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1583804988000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/Interpolator",
   "title": "Interpolator",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "Interpolator/",
   "description": "This sample demonstrates the use of animation interpolators and path animations for Material Design.",
   "introduction": "<p><code>Material Design</code> is a comprehensive guide for visual, motion, and interaction design across platforms and devices. Starting with API level 21, <a href=\"https://developer.android.com/training/material/index.html\">Android includes support for material design</a> apps.</p>\n<p>This sample demonstrates the use of <code>Material Design</code> animation interpolators and path animations. It uses an <a href=\"https://developer.android.com/guide/topics/graphics/prop-animation.html#object-animator\">ObjectAnimator</a> to animate two view properties, <code>Scale_X</code> and <code>Scale_Y</code>. Users can pick from a set of interpolator options. They can also define the duration of the animation.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/animation-samples/main/Interpolator/screenshots/before.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/animation-samples/main/Interpolator/screenshots/after.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.animation.ObjectAnimator",
     "link": "https://developer.android.com/reference/android/animation/ObjectAnimator.html"
    },
    {
     "namespace": "android",
     "name": "android.view.animation.Interpolator",
     "link": "https://developer.android.com/reference/android/view/animation/Interpolator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1614285217000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/Motion",
   "title": "Motion",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "Motion/",
   "description": "A collection of demos for Material Design Motion.\n<a href=\"https://material.io\">Material Design</a> provides a lot of examples about motion design. This sample shows how to implement them on Android.\n<li><a href=\"https://material.io/design/motion/understanding-motion.html\">Understanding motion</a></li> \n<li><a href=\"https://material.io/design/motion/speed.html\">Speed</a></li> \n<li><a href=\"https://material.io/design/motion/choreography.html\">Choreography</a></li> \n<li><a href=\"https://material.io/design/motion/customization.html\">Customization</a></li>\n<a href=\"https://developer.android.com/training/animation\">Animations and Transitions</a> explains how to use various animation APIs on Android.\nAll the source codes for demos are in the <a href=\"app/src/main/java/com/example/android/motion/demo\">demo</a> package.\n<a href=\"app/src/main/java/com/example/android/motion/demo/dissolve\">Layout &gt; Dissolve</a>\n<img src=\"screenshots/dissolve.gif\" height=\"400\" alt=\"dissolve\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/fadethrough\">Layout &gt; Fade through</a>\n<img src=\"screenshots/fadethrough.gif\" height=\"400\" alt=\"fadethrough\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/fabtransformation\">Layout &gt; FAB transformation</a>\n<img src=\"screenshots/fabtransformation.gif\" height=\"400\" alt=\"fab\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/reorder\">List &gt; Reorder</a>\n<img src=\"screenshots/reordering.gif\" height=\"400\" alt=\"reorder\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/stagger\">List &gt; Stagger</a>\n<img src=\"screenshots/stagger.gif\" height=\"400\" alt=\"stagger\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/oscillation\">List &gt; Oscillation</a>\n<img src=\"screenshots/oscillation.gif\" height=\"400\" alt=\"oscillation\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/sharedelement\">Navigation &gt; Shared element</a>\n<img src=\"screenshots/sharedelement.gif\" height=\"400\" alt=\"sharedelement\" />\n<a href=\"app/src/main/java/com/example/android/motion/demo/navfadethrough\">Navigation &gt; Fade through</a>\n<img src=\"screenshots/navigationfadethrough.gif\" height=\"400\" alt=\"navfadethrough\" />",
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.transition.Transition",
     "link": "https://developer.android.com/reference/androidx/transition/Transition.html"
    },
    {
     "namespace": "android",
     "name": "androidx.dynamicanimation.animation.SpringAnimation",
     "link": "https://developer.android.com/reference/androidx/dynamicanimation/animation/SpringAnimation.html"
    },
    {
     "namespace": "android",
     "name": "android.animation.ObjectAnimator",
     "link": "https://developer.android.com/reference/android/animation/ObjectAnimator.html"
    },
    {
     "namespace": "android",
     "name": "android.view.ViewPropertyAnimator",
     "link": "https://developer.android.com/reference/android/view/ViewPropertyAnimator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1603872868000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/animation-samples/RevealEffectBasic",
   "title": "RevealEffectBasic",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "animation"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/animation-samples/",
   "github": "android/animation",
   "branch": "main",
   "path": "RevealEffectBasic/",
   "description": "Sample demonstrating circular reveal effect. It covers creating an <a href=\"https://developer.android.com/reference/android/animation/Animator.html\">Animator</a> with <a href=\"https://developer.android.com/reference/android/view/ViewAnimationUtils.html\">ViewAnimationUtils</a> as well as defining the parameters of the circular reveal including starting position and radius.",
   "introduction": "<p>Sample demonstrating circular reveal effect. Reveal animations can be used to provide visual continuity when showing or hiding views. With <a href=\"https://developer.android.com/reference/android/animation/Animator.html\">ViewAnimationsUtils.createCircularReveal()</a> you can use the startRadius and endRadius to define a hiding or revealing animation. You can also define the center of the animation, in this sample the center is x=0, y=0 which defines the top left of the View as the center.</p>\n<p>Press the <em>Reveal</em> button to see the the circular reveal.</p>\n<p><a href=\"https://developer.android.com/reference/android/animation/Animator.html\">1</a>: http://developer.android.com/reference/android/view/ViewAnimationUtils.html#createCircularReveal(android.view.View, int, int, float, float)</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/animation-samples/main/RevealEffectBasic/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.ViewAnimationUtils",
     "link": "https://developer.android.com/reference/android/view/ViewAnimationUtils.html"
    },
    {
     "namespace": "android",
     "name": "android.animation.Animator",
     "link": "https://developer.android.com/reference/android/animation/Animator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1566864842000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/analytics",
   "title": "Instant Apps - Google Analytics Example",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/analytics/",
   "description": "This sample app demonstrates how to integrate Google Analytics for Firebase into an instant app.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/cookie-api",
   "title": "Instant Apps - Cookie API",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/cookie-api/",
   "description": "This sample app demonstrates how to use the Cookie API.\nIt contains storage and retrieval of values using both, the Android Framework API and the InstantApps Play Services API.\nUsage\nThis API is available to both, the Instant App as well as the Installed App, and allows to migrate user-generated data from an instant app to an installed app.\nThe flow for this API is as follows:\n<li>Check whether the cookie fits the allowance.</li> \n<li>Store data within the instant app.</li> \n<li>Retrieve data from the installed app.</li>\n<p>This API is available for API 26 or higher via <a href=\"https://developer.android.com/reference/android/content/pm/PackageManager.html\">PackageManager</a> and for API levels lesser than 26 via <a href=\"https://developers.google.com/android/reference/com/google/android/gms/instantapps/PackageManagerCompat\">PackageManagerCompat</a>.</p>\nBuild Variants\nThis sample has two build variants:\n<li><code>framework</code> -&gt; Android 8.0 (API level 26) or higher</li> \n<li><code>playServices</code> -&gt; Any API level</li>\nThe two build variants provide the same features, but one uses the Framework API whereas the other one uses the InstantApps Play Services API.\nTesting the API with this sample\n<li>Run the application by checking the &quot;deploy as instant app&quot; in the run configuration</li> \n<li>Store some data</li> \n<li>Run the application by unchecking the &quot;deploy as instant app&quot; in the run configuration</li> \n<li>Retrieve the data stored earlier</li>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/install-api",
   "title": "Instant Apps - Install API sample",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/install-api/",
   "description": "This sample app demonstrates how to use the [Install API](https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantApps.html#showInstallPrompt(android.app.Activity,%20android.content.Intent,%20int,%20java.lang.String)).\nThe API triggers Intent to install the app on device. The call also accepts Intent, which is triggered after the installation is complete.\nIf an app wants to utilize this API, it needs an installable app on the Google Play Store. Also the applicationIds on both the instant as well as the application module have to match.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/multi-feature-module",
   "title": "Instant Apps - Multi feature sample app",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/multi-feature-module/",
   "description": "This sample app demonstrates building an installable and an instant app with the same behaviors. The functionality of the instant app is split in two features, which can be individually launched on a device.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/service",
   "title": "Instant Apps - Service",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/service/",
   "description": "This sample demonstrates how to create a started or a bound <a href=\"https://developer.android.com/guide/components/services.html\">service</a> within Android Instant Apps.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/app-bundle-samples/InstantApps/storage-api",
   "title": "Instant Apps - Storage API sample",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "app bundle"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/app-bundle-samples/",
   "github": "android/app-bundle-samples",
   "branch": "main",
   "path": "InstantApps/storage-api/",
   "description": "This sample app demonstrates how to use the Storage API.\nIt is relevant to devices running on Android versions <strong>lower than API level 26</strong>.\nOn devices running on API level 26 or higher, the Android framework takes care of migrating user data from instant app to installed app.\nAfter installation is completed, the installed app transfers the stored data from the instant app by using this API, providing a seamless experience for the user.\nUsage\nIn the installed app, call the [Storage API](https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantAppsClient.html#getInstantAppData()). The API lets you access the data stored in the instant app.\nFor more information about data storage, see [the documentation](https://developers.google.com/android/reference/com/google/android/gms/instantapps/InstantAppsClient.html#getInstantAppData()).",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1596462522000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/BasicRxJavaSample",
   "title": "Room & RxJava",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "BasicRxJavaSample/",
   "description": "This is an API sample to showcase how to implement observable queries in <a href=\"https://developer.android.com/topic/libraries/architecture/room.html\">Room</a>, with RxJava's <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Flowable.html\">Flowable</a> objects.",
   "introduction": "<h3>Functionality</h3>\n<p>The sample app shows an editable user name, stored in the database.</p>\n<h3>Implementation</h3>\n<h4>Data layer</h4>\n<p>The database is created using Room and has one entity: a <code>User</code>. Room generates the corresponding SQLite table at runtime.</p>\n<p>Queries are executed in the <code>UserDao</code> class. The user retrieval is done via an observable query implemented using a <code>Flowable</code>. Every time the user data is updated, the Flowable object will emit automatically, allowing to update the UI based on the latest data. The Flowable will emit only when the query result contains at least a row. When there is no data to match the query, the Flowable will not emit.</p>\n<h4>Presentation layer</h4>\n<p>The app has a main Activity that displays the data. The Activity works with a ViewModel to do the following: * subscribe to the emissions of the user name and update the UI every time there is a new user name emitted * notify the ViewModel when the &quot;Update&quot; button is pressed and pass the new user name. The ViewModel works with the data source to get and save the data.</p>\n<p>Room guarantees that the observable query will be triggered on a background thread. In the Activity, the Flowable events are set to be received on the main thread, so the UI can be updated. The insert query is synchronous so it's wrapped in a Completable and executed on a background thread. On completion, the Activity is notified on the main thread.</p>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/BasicRxJavaSampleKotlin",
   "title": "Room & RxJava (Kotlin)",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "BasicRxJavaSampleKotlin/",
   "description": "This is an API sample to showcase how to use <a href=\"https://developer.android.com/topic/libraries/architecture/room.html\">Room</a>, with RxJava's <a href=\"http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Flowable.html\">Flowable</a> objects in Kotlin.",
   "introduction": "<h3>Functionality</h3>\n<p>The sample app shows an editable user name, stored in the database.</p>\n<h3>Implementation</h3>\n<h4>Data layer</h4>\n<p>The database is created using Room and has one entity: a <code>User</code>. Room generates the corresponding SQLite table at runtime.</p>\n<p>Queries are executed in the <code>UserDao</code> class. The user retrieval is done via an observable query implemented using a <code>Flowable</code>. Every time the user data is updated, the Flowable object will emit automatically, allowing it to update the UI based on the latest data. The Flowable will emit only when the query result contains at least a row. When there is no data to match the query, the Flowable will not emit.</p>\n<h4>Presentation layer</h4>\n<p>The app has a main Activity that displays the data. The Activity works with a ViewModel to do the following: * subscribe to the emissions of the user name and updates the UI every time there is a new user name emitted * notify the ViewModel when the user pressed the &quot;Update&quot; button and passes the new user name. The ViewModel works with the data source to get and save the data.</p>\n<p>Room guarantees that the observable query will be triggered on a background thread. In the Activity, the Flowable events are set to be received on the main thread, so the UI can be updated. The insert query is synchronous so it's wrapped in a Completable and executed on a background thread. On completion, the Activity is notified on the main thread.</p>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/BasicSample",
   "title": "Architecture Components Basic",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "BasicSample/",
   "description": "This sample showcases the following Architecture Components:\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/room.html\">Room</a></li> \n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html\">ViewModels</a></li> \n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LiveData.html\">LiveData</a></li>",
   "introduction": "<h3>Features</h3>\n<p>This sample contains two screens: a list of products and a detail view, that shows product reviews.</p>\n<h4>Presentation layer</h4>\n<p>The presentation layer consists of the following components: * A main activity that handles navigation. * A fragment to display the list of products. * A fragment to display a product review.</p>\n<p>The app uses a Model-View-ViewModel (MVVM) architecture for the presentation layer. Each of the fragments corresponds to a MVVM View. The View and ViewModel communicate using LiveData and the following design principles:</p>\n<ul> \n <li>ViewModel objects don't have references to activities, fragments, or Android views. That would cause leaks on configuration changes, such as a screen rotation, because the system retains a ViewModel across the entire lifecycle of the corresponding view.</li> \n</ul>\n<p><img src=\"docs/images/VM_diagram.png?raw=true\" alt=\"ViewModel Diagram\" title=\"ViewModel Diagram\" \"=\"\" /></p>\n<ul> \n <li><p>ViewModel objects expose data using <code>LiveData</code> objects. <code>LiveData</code> allows you to observe changes to data across multiple components of your app without creating explicit and rigid dependency paths between them.</p></li> \n <li><p>Views, including the fragments used in this sample, subscribe to corresponding <code>LiveData</code> objects. Because <code>LiveData</code> is lifecycle-aware, it doesn’t push changes to the underlying data if the observer is not in an active state, and this helps to avoid many common bugs. This is an example of a subscription:</p></li> \n</ul>\n<p><code>java // Update the list of products when the underlying data changes. viewModel.getProducts().observe(this, new Observer&lt;List&lt;ProductEntity&gt;&gt;() { @Override public void onChanged(@Nullable List&lt;ProductEntity&gt; myProducts) { if (myProducts != null) { mBinding.setIsLoading(false); mProductAdapter.setProductList(myProducts); } else { mBinding.setIsLoading(true); } } }); </code></p>\n<h4>Data layer</h4>\n<p>The database is created using Room and it has two entities: a <code>ProductEntity</code> and a <code>CommentEntity</code> that generate corresponding SQLite tables at runtime.</p>\n<p>Room populates the database asynchronously when it's created, via the <code>RoomDatabase#Callback</code>. To simulate low-performance, an artificial delay is added. To let other components know when the data has finished populating, the <code>AppDatabase</code> exposes a <code>LiveData</code> object.</p>\n<p>To access the data and execute queries, you use a <a href=\"https://developer.android.com/topic/libraries/architecture/room.html#daos\">Data Access Object</a> (DAO). For example, a product is loaded with the following query:</p>\n<p><code>java @Query(&quot;select * from products where id = :productId&quot;) LiveData&lt;ProductEntity&gt; loadProduct(int productId); </code></p>\n<p>Queries that return a <code>LiveData</code> object can be observed, so when a change in one of the affected tables is detected, <code>LiveData</code> delivers a notification of that change to the registered observers.</p>\n<p>The <code>DataRepository</code> exposes the data to the UI layer. To ensure that the UI uses the list of products only after the database has been pre-populated, a <a href=\"https://developer.android.com/reference/android/arch/lifecycle/MediatorLiveData.html\"><code>MediatorLiveData</code></a> object is used. This observes the changes of the list of products and only forwards it when the database is ready to be used. </p>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/GithubBrowserSample",
   "title": "Github Browser with Architecture Components",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "GithubBrowserSample/",
   "description": "This is a sample app that uses Android Architecture Components with Dagger 2.\n<strong>NOTE</strong> It is a relatively more complex and complete example so if you are not familiar with <a href=\"https://developer.android.com/arch\">Architecture Components</a>, you are highly recommended to check other examples in this repository first.",
   "introduction": "<h3>Functionality</h3>\n<p>The app is composed of 3 main screens.</p>\n<h4>SearchFragment</h4>\n<p>Allows you to search repositories on Github. Each search result is kept in the database in <code>RepoSearchResult</code> table where the list of repository IDs are denormalized into a single column. The actual <code>Repo</code> instances live in the <code>Repo</code> table.</p>\n<p>Each time a new page is fetched, the same <code>RepoSearchResult</code> record in the Database is updated with the new list of repository ids.</p>\n<p><strong>NOTE</strong> The UI currently loads all <code>Repo</code> items at once, which would not perform well on lower end devices. Instead of manually writing lazy adapters, we've decided to wait until the built in support in Room is released.</p>\n<h4>RepoFragment</h4>\n<p>This fragment displays the details of a repository and its contributors.</p>\n<h4>UserFragment</h4>\n<p>This fragment displays a user and their repositories.</p>\n<h3>Building</h3>\n<p>You can open the project in Android studio and press run.</p>\n<h3>Testing</h3>\n<p>The project uses both instrumentation tests that run on the device and local unit tests that run on your computer. To run both of them and generate a coverage report, you can run:</p>\n<p><code>./gradlew fullCoverageReport</code> (requires a connected device or an emulator)</p>\n<h4>Device Tests</h4>\n<h5>UI Tests</h5>\n<p>The projects uses Espresso for UI testing. Since each fragment is limited to a ViewModel, each test mocks related ViewModel to run the tests.</p>\n<h5>Database Tests</h5>\n<p>The project creates an in memory database for each database test but still runs them on the device.</p>\n<h4>Local Unit Tests</h4>\n<h5>ViewModel Tests</h5>\n<p>Each ViewModel is tested using local unit tests with mock Repository implementations.</p>\n<h5>Repository Tests</h5>\n<p>Each Repository is tested using local unit tests with mock web service and mock database.</p>\n<h5>Webservice Tests</h5>\n<p>The project uses <a href=\"https://github.com/square/okhttp/tree/master/mockwebserver\">MockWebServer</a> project to test REST api interactions.</p>\n<h3>Libraries</h3>\n<ul> \n <li><a href=\"https://developer.android.com/topic/libraries/support-library/index.html\">Android Support Library</a></li> \n <li><a href=\"https://developer.android.com/arch\">Android Architecture Components</a></li> \n <li><a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\">Android Data Binding</a></li> \n <li><a href=\"https://google.github.io/dagger\">Dagger 2</a> for dependency injection</li> \n <li><a href=\"http://square.github.io/retrofit\">Retrofit</a> for REST api communication</li> \n <li><a href=\"https://github.com/bumptech/glide\">Glide</a> for image loading</li> \n <li><a href=\"https://github.com/JakeWharton/timber\">Timber</a> for logging</li> \n <li><a href=\"https://google.github.io/android-testing-support-library/docs/espresso/\">espresso</a> for UI tests</li> \n <li><a href=\"http://site.mockito.org\">mockito</a> for mocking in tests</li> \n</ul>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/LiveDataSample",
   "title": "Kotlin Coroutines with Architecture Components (LiveData, ViewModel, Lifecycle)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "android/architecture-components-samples",
   "branch": "main",
   "path": "LiveDataSample/",
   "description": "This sample showcases the following Architecture Components:\n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LiveData.html\">LiveData</a></li> \n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html\">ViewModels</a></li> \n<li><a href=\"https://developer.android.com/topic/libraries/data-binding\">Data Binding</a></li>\nAnd the following artifacts:\n<li><a href=\"https://developer.android.com/jetpack/androidx/releases/lifecycle\">androidx.lifecycle.lifecycle-livedata-ktx</a></li>\nThis project shows how to integrate them with Kotlin's coroutines using the <code>liveData</code> builder.",
   "introduction": "<p>LiveData is a data holder class that can be observed within a given lifecycle. Usually, you use LiveData to communicate a ViewModel with a View. In this project you'll find different patterns showcasing the <code>liveData</code> builder that lets you control a LiveData from a coroutine block.</p>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/NavigationAdvancedSample",
   "title": "Architecture Components Advanced Navigation",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "NavigationAdvancedSample/",
   "description": "Features\nThis sample showcases the behavior of a bottom navigation view following the <a href=\"https://developer.android.com/topic/libraries/architecture/navigation#fixed\">Principles of Navigation</a>.\n<li>Fixed start destination</li> \n<li>Navigation state should be represented via a stack of destinations</li> \n<li>The Up button never exits your app</li> \n<li>Up and Back are identical within your app's task</li> \n<li>Deep linking and navigating to a destination should yield the same stack</li>\nCheck out the <a href=\"https://github.com/googlesamples/android-architecture-components/tree/master/NavigationAdvancedSample/app/src/androidTest/java/com/example/android/navigationadvancedsample\">UI tests</a> to learn about specific scenarios.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1621286212000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/PagingSample",
   "title": "Architecture Components Paging",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "PagingSample/",
   "description": "This sample showcases the following Architecture Components:\n<li><a href=\"https://developer.android.com/topic/libraries/architecture/paging.html\">Paging</a></li> \n<li><a href=\"https://developer.android.com/topic/libraries/architecture/room.html\">Room</a></li> \n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/ViewModel.html\">ViewModels</a></li> \n<li><a href=\"https://developer.android.com/reference/android/arch/lifecycle/LiveData.html\">LiveData</a></li>",
   "introduction": "<h3>Features</h3>\n<p>This sample contains a single screen with a list of text items. Items can be added to the list with the input at the top, and swiping items in the list removes them.</p>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1621628304000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/architecture-components-samples/PersistenceContentProviderSample",
   "title": "Room with Content Providers",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "architecture"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/architecture-components-samples/",
   "github": "googlesamples/android-architecture-components",
   "branch": "main",
   "path": "PersistenceContentProviderSample/",
   "description": "This sample demonstrates how to expose data stored in the Room persistence library with Android's Content Provider framework.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618428883000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/background-tasks-samples/WorkManager",
   "title": "Jetpack WorkManager",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "background tasks"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/background-tasks-samples/",
   "github": "android/background-tasks",
   "branch": "main",
   "path": "WorkManager/",
   "description": "This is a simple image processing application written in Kotlin that shows how to use <a href=\"https://developer.android.com/topic/libraries/architecture/workmanager/\">WorkManager</a> to do background work.",
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.work.WorkManager",
     "link": "https://developer.android.com/reference/androidx/work/WorkManager.html"
    },
    {
     "namespace": "android",
     "name": "androidx.work.WorkRequest",
     "link": "https://developer.android.com/reference/androidx/work/WorkRequest.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1570724550000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/camera-samples/Camera2Basic",
   "title": "Camera2Basic",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29+</li> \n <li>Android Studio 3.5+</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "camera"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/camera-samples/",
   "github": "android/camera",
   "branch": "main",
   "path": "Camera2Basic/",
   "description": "This sample demonstrates using the Camera2 API to capture a JPEG, DEPTH or RAW frame. Check the source code to see a simple example of how to display the camera preview and capture a still image using the default configuration with the selected pixel format.",
   "introduction": "<p>The <a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary.html\">Camera2 API</a> allows users to capture RAW images, i.e. unprocessed pixel data directly from the camera sensor that has not yet been converted into a format and colorspace typically used for displaying and storing images viewed by humans. The <a href=\"https://developer.android.com/reference/android/hardware/camera2/DngCreator.html\">DngCreator</a> class is provided as part of the Camera2 API as a utility for saving RAW images as DNG files.</p>\n<p>This sample displays a live camera preview in a TextureView, and saves JPEG and DNG file for each image captured.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/camera-samples/main/Camera2Basic/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.camera2.DngCreator",
     "link": "https://developer.android.com/reference/android/hardware/camera2/DngCreator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628868792000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/camera-samples/Camera2SlowMotion",
   "title": "Camera2SlowMotion",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29+</li> \n <li>Android Studio 3.5+</li> \n <li>Device with high-speed capture capability</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "camera"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/camera-samples/",
   "github": "android/camera-samples",
   "branch": "main",
   "path": "Camera2SlowMotion/",
   "description": "This sample captures high-speed video via the Camera2 API including displaying a camera preview and capturing a high-speed (slow motion) video using repeating burst capture requests.",
   "introduction": "<p>The <a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary.html\">Camera2 API</a> allows users to capture <a href=\"https://developer.android.com/reference/android/hardware/camera2/CameraMetadata.html#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO\">high-speed video</a>, i.e. slow motion, by sending repeating burst capture requests to the camera framework.</p>\n<p>This sample displays a live camera preview in SurfaceView, allows the user to press and hold the screen to record a video, and also encodes the recording in an MP4 video file.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/camera-samples/main/Camera2SlowMotion/screenshots/main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/camera-samples/main/Camera2SlowMotion/screenshots/video.gif",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.camera2",
     "link": "https://developer.android.com/reference/android/hardware/camera2.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraConstrainedHighSpeedCaptureSession.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628868792000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/camera-samples/Camera2Video",
   "title": "Camera2Video",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29+</li> \n <li>Android Studio 3.6+</li> \n <li>Device with video capture capability (or emulator)</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "camera"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/camera-samples/",
   "github": "android/camera-samples",
   "branch": "main",
   "path": "Camera2Video/",
   "description": "This sample captures video record via the Camera2 API including displaying a camera preview and capturing a high-speed (slow motion) video using repeating capture requests.",
   "introduction": "<p>The <a href=\"https://developer.android.com/reference/android/hardware/camera2/package-summary.html\">Camera2 API</a> allows users to capture video from the camera by sending repeating capture requests from the camera framework to a <a href=\"https://developer.android.com/reference/android/media/MediaRecorder\">media recorder</a>.</p>\n<p>This sample displays a live camera preview in SurfaceView, allows the user to press and hold the screen to record a video, and also encodes the recording in an MP4 video file.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/camera-samples/main/Camera2Video/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.camera2",
     "link": "https://developer.android.com/reference/android/hardware/camera2.html"
    },
    {
     "namespace": "android",
     "name": "android.media.MediaRecorder",
     "link": "https://developer.android.com/reference/android/media/MediaRecorder.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628868792000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/camera-samples/HdrViewfinder",
   "title": "HdrViewfinder",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "camera"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/camera-samples/",
   "github": "android/camera",
   "branch": "main",
   "path": "HdrViewfinder/",
   "description": "This demo implements a real-time high-dynamic-range camera viewfinder, by alternating the sensor's exposure time between two exposure values on even and odd frames, and then compositing together the latest two frames whenever a new frame is captured.",
   "introduction": "<p>A small demo of advanced camera functionality with the Android camera2 API.</p>\n<p>This demo implements a real-time high-dynamic-range camera viewfinder, by alternating the sensor's exposure time between two exposure values on even and odd frames, and then compositing together the latest two frames whenever a new frame is captured.</p>\n<p>The demo has three modes: Regular auto-exposure viewfinder, split-screen manual exposure, and the fused HDR viewfinder. The latter two use manual exposure controlled by the user, by swiping up/down on the right and left halves of the viewfinder. The left half controls the exposure time of even frames, and the right half controls the exposure time of odd frames.</p>\n<p>In split-screen mode, the even frames are shown on the left and the odd frames on the right, so the user can see two different exposures of the scene simultaneously. In fused HDR mode, the even/odd frames are merged together into a single image. By selecting different exposure values for the even/odd frames, the fused image has a higher dynamic range than the regular viewfinder.</p>\n<p>The HDR fusion and the split-screen viewfinder processing is done with RenderScript; as is the necessary YUV-&gt;RGB conversion. The camera subsystem outputs YUV images naturally, while the GPU and display subsystems generally only accept RGB data. Therefore, after the images are fused/composited, a standard YUV-&gt;RGB color transform is applied before the the data is written to the output Allocation. The HDR fusion algorithm is very simple, and tends to result in lower-contrast scenes, but has very few artifacts and can run very fast.</p>\n<p>Data is passed between the subsystems (camera, RenderScript, and display) using the Android <a href=\"http://developer.android.com/reference/android/view/Surface.html\">android.view.Surface</a> class, which allows for zero-copy transport of large buffers between processes and subsystems.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/camera-samples/main/HdrViewfinder/screenshots/image1.png",
     "primary": true
    }
   ],
   "icon": "big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraAccessException",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraAccessException.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraCaptureSession",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraCaptureSession.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraCharacteristics",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraCharacteristics.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraDevice",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraDevice.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CameraManager",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CameraManager.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CaptureRequest",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CaptureRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.CaptureResult",
     "link": "https://developer.android.com/reference/android/hardware/camera2/CaptureResult.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.camera2.TotalCaptureResult",
     "link": "https://developer.android.com/reference/android/hardware/camera2/TotalCaptureResult.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1627064746000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Crane",
   "title": "Crane sample",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Crane/",
   "description": "<a href=\"https://material.io/design/material-studies/crane.html\">Crane</a> is a travel app part of the Material Studies built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>. The goal of the sample is to showcase Material components, draggable UI elements, Android Views inside Compose, and UI state handling.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/compose-samples/main/Crane/screenshots/crane.gif",
     "primary": true
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/JetNews",
   "title": "Jetnews sample",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "JetNews/",
   "description": "Jetnews is a sample news reading app, built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>. The goal of the sample is to showcase the current UI capabilities of Compose.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/compose-samples/main/JetNews/screenshots/jetnews_demo.gif",
     "primary": true
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Jetcaster",
   "title": "Jetcaster sample 🎙️",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Jetcaster/",
   "description": "Jetcaster is a sample podcast app, built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>. The goal of the sample is to showcase dynamic theming and full featured architecture.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.\nStatus: 🚧 In progress 🚧\nJetcaster is still in the early stages of development, and as such only one screen has been created so far. However, most of the app's architecture has been implemented, as well as the data layer, and early stages of dynamic theming.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/compose-samples/main/Jetcaster/docs/jetcaster.gif",
     "primary": true
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Jetchat",
   "title": "Jetchat sample",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Jetchat/",
   "description": "Jetchat is a sample chat app built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a> You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.\nThis sample showcases:\n<li>UI state management</li> \n<li>Integration with Architecture Components: Navigation, Fragments, ViewModel</li> \n<li>Back button handling</li> \n<li>Text Input and focus management</li> \n<li>Multiple types of animations and transitions</li> \n<li>Saved state across configuration changes</li> \n<li>Basic Material Design theming</li> \n<li>UI tests</li>\n<img src=\"screenshots/jetchat.gif\" />\nStatus: 🚧 In progress\nJetchat is still in under development, and some features are not yet implemented.",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Jetsnack",
   "title": "Jetsnack sample",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Jetsnack/",
   "description": "Jetsnack is a sample snack ordering app built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.\nThis sample showcases:\n<li>How to implement a custom design system</li> \n<li>Custom layout</li> \n<li>Animation</li>\n<img src=\"screenshots/jetsnack.gif\" />\nStatus: 🚧 In progress 🚧\nJetsnack is still under development and some screens are not yet implemented.",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Jetsurvey",
   "title": "Jetsurvey sample",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Jetsurvey/",
   "description": "Jetsurvey is a sample survey app, built with <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a>. The goal of the sample is to showcase text input, validation and state capabilities of Compose.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/compose-samples/main/Jetsurvey/screenshots/survey.gif",
     "primary": true
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/compose-samples/Owl",
   "title": "Owl sample",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "compose"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/compose-samples/",
   "github": "android/compose-samples",
   "branch": "main",
   "path": "Owl/",
   "description": "This sample is a <a href=\"https://developer.android.com/jetpack/compose\">Jetpack Compose</a> implementation of <a href=\"https://material.io/design/material-studies/owl.html\">Owl</a>, a Material Design study.\nTo try out this sample app, you need to use <a href=\"https://developer.android.com/studio\">Android Studio Arctic Fox</a>. You can clone this repository or import the project from Android Studio following the steps <a href=\"https://developer.android.com/jetpack/compose/setup#sample\">here</a>.\nThis sample showcases:\n<li><a href=\"https://material.io/design/material-theming/overview.html#material-theming\">Material theming</a> &amp; light/dark themes</li> \n<li>Custom layout</li> \n<li>Animation</li>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/compose-samples/main/Owl/screenshots/owl.gif",
     "primary": true
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.compose.Composable",
     "link": "https://developer.android.com/reference/androidx/compose/Composable.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629366312000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/connectivity-samples/BeamLargeFiles",
   "title": "BeamLargeFiles",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "connectivity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/connectivity-samples/",
   "github": "android/connectivity",
   "branch": "main",
   "path": "BeamLargeFiles/",
   "description": "This sample demonstrates how to transfer large files via Android Beam. After the initial handshake over NFC, file transfer will take place over a secondary high-speed communication channel such as Bluetooth or WiFi Direct.\nThis feature requires Android 4.1 (Jelly Bean) or above. Unlike traditional Beam, your application will not receive an Intent on the receiving device. Instead, the system will save the file to disk and display a notification that the user can select to open the file using a standard ACTION_VIEW Intent.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1564526754000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/connectivity-samples/BluetoothAdvertisements",
   "title": "BluetoothAdvertisements",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "connectivity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/connectivity-samples/",
   "github": "android/connectivity",
   "branch": "main",
   "path": "BluetoothAdvertisements/",
   "description": "Sample demonstrating how to advertise small amounts of data using the Bluetooth Low Energy API. Also demonstrates how to scan for those Advertisements. (requires 2 devices to see full operation)",
   "introduction": "<p>This sample demonstrates use of the Bluetooth Low Energy (BLE) <a href=\"https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html\">Advertisement</a> and <a href=\"https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html\">Scanning</a> APIs. The functionality is split into two fragments - one for Advertising, one for Scanning.</p>\n<p>ScannerFragment activates BLE Scanning for 5 seconds and displays a list of found devices which are advertising using this sample. It shows the device type, Bluetooth address, and when it was last seen. User can refresh to scan again and update the list.</p>\n<p>AdvertiserFragment allows the user to toggle BLE Advertising of that device. It broadcasts basic information about the device along with a UUID specific to this app so the ScannerFragment on other devices can filter by it.</p>\n<p>Note: A device cannot detect its own BLE advertisements. You will need two devices to see this sample in action.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/connectivity-samples/main/BluetoothAdvertisements/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.bluetooth.le.BluetoothLeAdvertiser",
     "link": "https://developer.android.com/reference/android/bluetooth/le/BluetoothLeAdvertiser.html"
    },
    {
     "namespace": "android",
     "name": "android.bluetooth.le.BluetoothLeScanner",
     "link": "https://developer.android.com/reference/android/bluetooth/le/BluetoothLeScanner.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624630846000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/connectivity-samples/NetworkConnect",
   "title": "NetworkConnect",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "connectivity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/connectivity-samples/",
   "github": "android/connectivity",
   "branch": "main",
   "path": "NetworkConnect/",
   "description": "This sample demonstrates how to connect to the network and fetch raw HTML using HttpsURLConnection. AsyncTask is used to perform the fetch on a background thread.",
   "introduction": "<p>This sample demonstrates how to connect to the network and fetch raw HTML using <a href=\"https://developer.android.com/reference/javax/net/ssl/HttpsURLConnection.html\"><code>HttpsURLConnection</code></a>. Since API 11, it is required by default that all network operations run on a background thread in order to avoid hanging on the UI thread. Only when the network response is ready should the work return to the main thread to update the UI. An <a href=\"https://developer.android.com/reference/android/os/AsyncTask.html\"><code>AsyncTask</code></a> is a viable background task manager that is used to perform the network operation and return to the UI thread upon completion.</p>\n<p>The sample also utilizes the <a href=\"https://developer.android.com/reference/android/net/ConnectivityManager.html\"><code>ConnectivityManager</code></a> to determine if you have a network connection, and if so, what type of connection it is.</p>\n<p>Using an <a href=\"https://developer.android.com/reference/android/content/AsyncTaskLoader.html\"><code>AsyncTaskLoader</code></a> or an <a href=\"https://developer.android.com/reference/android/app/IntentService.html\"><code>IntentService</code></a> are two common alternatives for managing longer running background work.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/connectivity-samples/main/NetworkConnect/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.os.AsyncTask",
     "link": "https://developer.android.com/reference/android/os/AsyncTask.html"
    },
    {
     "namespace": "android",
     "name": "android.net.ConnectivityManager",
     "link": "https://developer.android.com/reference/android/net/ConnectivityManager.html"
    },
    {
     "namespace": "android",
     "name": "android.net.NetworkInfo",
     "link": "https://developer.android.com/reference/android/net/NetworkInfo.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1564527041000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/connectivity-samples/WifiRttScan",
   "title": "WifiRttScan",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "connectivity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/connectivity-samples/",
   "github": "android/connectivity",
   "branch": "main",
   "path": "WifiRttScan/",
   "description": "Sample demonstrates best practices for using WifiRTT APIs in Android. Also, this is a a useful application for testing Wifi-RTT enabled phones and access points and validating the estimated distance is close to the actual distance between them.",
   "introduction": "<p>Steps for trying out the sample: * Compile and install the mobile app onto your mobile device (for mobile scenario).</p>\n<p>This sample demonstrates best practices for using the WifiRtt APIs in Android. The main activity lists all access points that are WifiRtt enabled using the <a href=\"https://developer.android.com/reference/android/net/wifi/WifiManager\">WifiManager</a>. By clicking on one of the access points, another activity will launch and initiate <a href=\"https://developer.android.com/reference/android/net/wifi/rtt/RangingRequest\">RangingRequest</a> via the <a href=\"https://developer.android.com/reference/android/net/wifi/rtt/WifiRttManager\">WifiRttManager</a>. The activity will display many of the details returned from the access point including the distance between the access point and the phone.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/connectivity-samples/main/WifiRttScan/screenshots/main1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/connectivity-samples/main/WifiRttScan/screenshots/main2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/connectivity-samples/main/WifiRttScan/screenshots/main3.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.net.wifi.ScanResult",
     "link": "https://developer.android.com/reference/android/net/wifi/ScanResult.html"
    },
    {
     "namespace": "android",
     "name": "android.net.wifi.WifiManager",
     "link": "https://developer.android.com/reference/android/net/wifi/WifiManager.html"
    },
    {
     "namespace": "android",
     "name": "android.net.wifi.rtt.RangingRequest",
     "link": "https://developer.android.com/reference/android/net/wifi/rtt/RangingRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.net.wifi.rtt.RangingResult",
     "link": "https://developer.android.com/reference/android/net/wifi/rtt/RangingResult.html"
    },
    {
     "namespace": "android",
     "name": "android.net.wifi.rtt.RangingResultCallback",
     "link": "https://developer.android.com/reference/android/net/wifi/rtt/RangingResultCallback.html"
    },
    {
     "namespace": "android",
     "name": "android.net.wifi.rtt.WifiRttManager",
     "link": "https://developer.android.com/reference/android/net/wifi/rtt/WifiRttManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1564526902000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/databinding-samples/BasicSample",
   "title": "Data Binding Basic",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "data binding"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/databinding-samples/",
   "github": "googlesamples/android-databinding",
   "branch": "main",
   "path": "BasicSample/",
   "description": "This sample showcases the following features of the <a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\">Data Binding library</a>:\n<li>Layout variables and expressions</li> \n<li>Observability through Observable Fields, LiveData and Observable classes</li> \n<li>Binding Adapters, Binding Methods and Binding Converters</li> \n<li>Seamless integration with ViewModels</li>\nIt shows common bad practices and their solutions in two different screens.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622666808000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/databinding-samples/TwoWaySample",
   "title": "Data Binding Advanced",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "data binding"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/databinding-samples/",
   "github": "googlesamples/android-databinding",
   "branch": "main",
   "path": "TwoWaySample/",
   "description": "This sample showcases the following features of the <a href=\"https://developer.android.com/topic/libraries/data-binding/index.html\">Data Binding library</a> with an app that shows a workout timer.\n<li>Two-way Data Binding</li> \n<li>Alternatives to Two-way Data Binding</li> \n<li>Binding adapters with multiple parameters</li> \n<li>Animations with Binding Adapters</li> \n<li>Binding converters and inverse converters</li> \n<li>Data Binding with ViewModels and Kotlin</li> \n<li>No UI framework calls in activity</li> \n<li>Testing</li>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622666808000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/AppRestrictionEnforcer",
   "title": "AppRestrictionEnforcer",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "AppRestrictionEnforcer/",
   "description": "This sample demonstrates how to set restrictions to other apps as a profile owner. Use the AppRestrictionSchema sample to set restrictions.",
   "introduction": "<p>The <a href=\"http://developer.android.com/guide/topics/admin/device-admin.html\">Android Device Administration API</a> allows enterprise administrators to enforce specific policies on a managed device. The system provides policies that control settings such as password complexity, screen lock, or camera availability. Developers can also augment this list with custom policies that control specific features within their applications. For example, a web browser could provide access to a whitelist of allowed domains.</p>\n<p>This sample demonstrates the 'admin' component and shows how a number of custom properties (booleans, strings, numbers, lists) can be set and enforced on another app.</p>\n<p>See the <a href=\"https://github.com/googlesamples/android-AppRestrictionSchema\">AppRestrictionSchema sample</a> for further details.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/AppRestrictionEnforcer/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.admin.DevicePolicyManager",
     "link": "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html"
    },
    {
     "namespace": "android",
     "name": "android.content.RestrictionEntry",
     "link": "https://developer.android.com/reference/android/content/RestrictionEntry.html"
    },
    {
     "namespace": "android",
     "name": "android.content.RestrictionsManager",
     "link": "https://developer.android.com/reference/android/content/RestrictionsManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569305406000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/AppRestrictionSchema",
   "title": "AppRestrictionSchema",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "AppRestrictionSchema/",
   "description": "A basic app showing how to allow a device administrator to restrict user activities using the Android Device Administration API. The app exports a custom policy that enables or disables a UI control. Device Administration applications are able to enforce a specific value for this policy, as directed by enterprise administrators.",
   "introduction": "<p>The <a href=\"http://developer.android.com/guide/topics/admin/device-admin.html\">Android Device Administration API</a> allows enterprise administrators to enforce specific policies on a managed device. The system provides policies that control settings such as password complexity, screen lock, or camera availability. Developers can also augment this list with custom policies that control specific features within their applications. For example, a web browser could provide access to a whitelist of allowed domains.</p>\n<p>The list of policies exposed by an app must be specified using a file inside of the <code>res/xml</code> directory, using the <code>&lt;restriction&gt;</code> tag:</p>\n<p>```xml &lt;restrictions xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</p>\n<pre><code>&lt;restriction\n        android:defaultValue=&quot;false&quot;\n        android:description=&quot;@string/description_can_say_hello&quot;\n        android:key=&quot;can_say_hello&quot;\n        android:restrictionType=&quot;bool&quot;\n        android:title=&quot;@string/title_can_say_hello&quot; /&gt;\n</code></pre>\n<p> ```</p>\n<p>In this sample, that file can be found at <code>Application/src/main/res/xml/app_restrictions.xml</code>. This file must be also be declared inside of <code>ApplicationManifest.xml</code> using a <code>&lt;meta-data&gt;</code> element:</p>\n<p><code>xml &lt;meta-data android:name=&quot;android.content.APP_RESTRICTIONS&quot; android:resource=&quot;@xml/app_restrictions&quot; /&gt; </code></p>\n<p>At runtime, the current list of restrictions enforced by policy can be checked by calling <a href=\"https://developer.android.com/reference/android/content/RestrictionsManager.html#getApplicationRestrictions()\">RestrictionsManager.getApplicationRestrictions()</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/AppRestrictionSchema/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.RestrictionsManager",
     "link": "https://developer.android.com/reference/android/content/RestrictionsManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569357936000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/AppRestrictions",
   "title": "AppRestrictions",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "AppRestrictions/",
   "description": "A sample that demonstrates the use of the App Restriction feature on devices with multiuser support",
   "introduction": "<p>This sample demonstrates the use of the App Restriction feature, which is available on Android 4.3 and above tablet device with the multiuser feature.</p>\n<p>When launched under the primary User account, you can toggle between standard app restriction types and custom. When launched under a restricted profile, this activity displays app restriction settings, if available.</p>\n<p>This sample app maintains custom app restriction settings in shared preferences. When the activity is invoked (from Settings &gt; Users), the stored settings are used to initialize the custom configuration on the user interface. Three sample <a href=\"https://developer.android.com/reference/android/content/RestrictionEntry.html\">RestrictionEntry</a> types are shown: checkbox, single-choice, and multi-choice. When the settings are modified by the user, the corresponding restriction entries are saved, which are retrievable under a restricted profile through the <a href=\"https://developer.android.com/reference/android/os/UserManager.html\">UserManager</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/AppRestrictions/screenshots/1-application.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/AppRestrictions/screenshots/2-custom-restrictions-actiivity.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.RestrictionEntry",
     "link": "https://developer.android.com/reference/android/content/RestrictionEntry.html"
    },
    {
     "namespace": "android",
     "name": "android.os.UserManager",
     "link": "https://developer.android.com/reference/android/os/UserManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569993999000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/BasicManagedProfile",
   "title": "BasicManagedProfile",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 29</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "BasicManagedProfile/",
   "description": "This sample demonstrates basic functionalities of Managed Profile API introduced in Android 5.0 Lollipop. You can set up this app as a profile owner, and use this app to enable/disable apps in the newly created managed profile. You can also set restrictions to some apps, enable/disable Intent forwarding between profiles, and wipe out all the data associated with the profile.",
   "introduction": "<p>As of Android 5.0, DevicePolicyManager introduces new features to support managed profile.</p>\n<p>To set up this app as a profile owner, you need to encrypt your device (you are prompted to do if you haven't). This doesn't wipe out the device, but be aware that you can set up only one managed profile at a time.</p>\n<p><a href=\"http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#isProfileOwnerApp(java.lang.String)\">isProfileOwnerApp</a> can be used to determine if a particular package is registered as the profile owner for the current user. You can initiate the provisioning flow of a managed profile with Intent of <a href=\"http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#ACTION_PROVISION_MANAGED_PROFILE\">ACTION_PROVISION_MANAGED_PROFILE</a>.</p>\n<p>In order to receive the result of provisioning flow, you have to create an Activity that reacts to <a href=\"https://developer.android.com/reference/android/app/admin/DevicePolicyManager#ACTION_PROVISIONING_SUCCESSFUL\">android.app.action.PROVISIONING_SUCCESSFUL</a> Intent action. Use <a href=\"http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setProfileEnabled(android.content.ComponentName)\">setProfileEnabled</a> to enable the newly created profile. Implement a class extending <a href=\"http://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html\">DeviceAdminReceiver</a> and specify it as the parameter. Your app is now set up as a profile owner. To support API levels below 26, you also have to enable the profile in <a href=\"https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver#onProfileProvisioningComplete(android.content.Context,%20android.content.Intent)\">onProfileProvisioningComplete</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/BasicManagedProfile/screenshots/not_set_up.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/BasicManagedProfile/screenshots/set_up.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/BasicManagedProfile/screenshots/main.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.admin.DevicePolicyManager",
     "link": "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html"
    },
    {
     "namespace": "android",
     "name": "android.app.admin.DeviceAdminReceiver",
     "link": "https://developer.android.com/reference/android/app/admin/DeviceAdminReceiver.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1581662080000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/DeviceOwner",
   "title": "DeviceOwner",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "DeviceOwner/",
   "description": "This sample demonstrates how to use some device owner features. As a device owner, you can configure global settings such as automatic time and timezone. You can mandate a specific launcher by preferred intent handler.",
   "introduction": "<p>In order to set global settings, use [DevicePolicyManager#setGlobalSetting][1] and specify one of the [Settings.Global][2] keys available. Note that you need to specify its value as a String. As most of the keys accept boolean values, you will mostly use &quot;1&quot; for true and &quot;0&quot; for false.</p>\n<p>You can mandate a specific launcher by adding a persistent preferred activity for an IntentFilter with Intent.CATEGORY_HOME category. Call [DevicePolicyManager#addPersistentPreferredActivity][3] to register the activity. You can clear the registration with [clearPackagePersistentPreferredActivities][4].</p>\n<p>As a device owner, you can also use the features available for managed profile owner. See [BasicManagedProfile][5].</p>\n<p>[1]: http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String) [2]: http://developer.android.com/reference/android/provider/Settings.Global.html [3]: http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#addPersistentPreferredActivity(android.content.ComponentName, android.content.IntentFilter, android.content.ComponentName) [4]: http://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String) [5]: https://developer.android.com/samples/BasicManagedProfile/index.html</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/DeviceOwner/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.admin.DevicePolicyManager",
     "link": "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.Settings",
     "link": "https://developer.android.com/reference/android/provider/Settings.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1590018451000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/enterprise-samples/NfcProvisioning",
   "title": "NfcProvisioning",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "enterprise"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/enterprise-samples/",
   "github": "android/enterprise",
   "branch": "main",
   "path": "NfcProvisioning/",
   "description": "This sample demonstrates how to use NFC to provision a new device with a device owner. Device owner is a specialized type of device administrator that can control device security and configuration. This sample itself is not a device owner, but it is a programming app that sends NFC message to an unprovisioned peer device and tells it to set up the specified device owner app.",
   "introduction": "<p>NFC Provisioning app is nothing but an ordinary Android Beam app that just sends out provisioning values to the peer device. This sample uses the values below.</p>\n<ul> \n <li><code>EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME</code> - The package name of the mobile device management application that will be set as the profile owner or device owner.</li> \n <li><code>EXTRA_PROVISIONING_LOCALE</code> - The Locale that the device will be set to.</li> \n <li><code>EXTRA_PROVISIONING_TIME_ZONE</code> - The time zone AlarmManager that the device will be set to.</li> \n <li><code>EXTRA_PROVISIONING_WIFI_SSID</code> - The ssid of the wifi network that should be used during nfc device owner provisioning for downloading the mobile device management application.</li> \n <li><code>EXTRA_PROVISIONING_WIFI_PASSWORD</code> - The password of the wifi network in EXTRA_PROVISIONING_WIFI_SSID.</li> \n</ul>\n<p>Store values in an instance of Properties. Get a byte array representation of the Properties using ByteArrayOutputStream. Create an NdefRecord with the MIME type of <a href=\"https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html#MIME_TYPE_PROVISIONING_NFC\">DevicePolicyManager.MIME_TYPE_PROVISIONING_NFC</a>. Use <a href=\"http://developer.android.com/reference/android/nfc/NfcAdapter.html#setNdefPushMessage(android.nfc.NdefMessage,%20android.app.Activity,%20android.app.Activity...)\">NfcAdapter#setNdefPushMessage</a> to set the NdefMessage as the message to be sent.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/enterprise-samples/main/NfcProvisioning/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.admin.DevicePolicyManager",
     "link": "https://developer.android.com/reference/android/app/admin/DevicePolicyManager.html"
    },
    {
     "namespace": "android",
     "name": "android.nfc.NfcAdapter",
     "link": "https://developer.android.com/reference/android/nfc/NfcAdapter.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569311835000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/graphics-samples/DisplayingBitmaps",
   "title": "DisplayingBitmaps",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "graphics"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/graphics-samples/",
   "github": "android/graphics",
   "branch": "main",
   "path": "DisplayingBitmaps/",
   "description": "Sample demonstrating how to load large bitmaps efficiently off the main UI thread, caching bitmaps (both in memory and on disk), managing bitmap memory and displaying bitmaps in UI elements such as ViewPager and ListView/GridView.",
   "introduction": "<p>This is a sample application for the Android Training class <a href=\"http://developer.android.com/training/displaying-bitmaps/\">Displaying Bitmaps Efficiently</a>.</p>\n<p>It demonstrates how to load large bitmaps efficiently off the main UI thread, caching bitmaps (both in memory and on disk), managing bitmap memory and displaying bitmaps in UI elements such as ViewPager and ListView/GridView.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/graphics-samples/main/DisplayingBitmaps/screenshots/1-gridview.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/graphics-samples/main/DisplayingBitmaps/screenshots/2-detail.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.widget.ImageView",
     "link": "https://developer.android.com/reference/android/widget/ImageView.html"
    },
    {
     "namespace": "android",
     "name": "android.widget.GridView",
     "link": "https://developer.android.com/reference/android/widget/GridView.html"
    },
    {
     "namespace": "android",
     "name": "android.graphics.BitmapFactory",
     "link": "https://developer.android.com/reference/android/graphics/BitmapFactory.html"
    },
    {
     "namespace": "android",
     "name": "android.os.AsyncTask",
     "link": "https://developer.android.com/reference/android/os/AsyncTask.html"
    },
    {
     "namespace": "android",
     "name": "android.util.LruCache",
     "link": "https://developer.android.com/reference/android/util/LruCache.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.view.ViewPager",
     "link": "https://developer.android.com/reference/android/support/v4/view/ViewPager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1584065872000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/graphics-samples/DrawableTinting",
   "title": "DrawableTinting",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "graphics"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/graphics-samples/",
   "github": "android/graphics",
   "branch": "main",
   "path": "DrawableTinting/",
   "description": "Sample that shows applying tinting and color filters to Drawables both programmatically and as Drawable resources in XML.\nTinting is set on a nine-patch drawable through the &quot;tint&quot; and &quot;tintMode&quot; parameters. A color state list is referenced as the tint color, which defines colors for different states of a View (for example disabled/enabled, focused, pressed or selected).\nProgrammatically, tinting is applied to a Drawable through its &quot;setColorFilter&quot; method, with a reference to a color and a PorterDuff blend mode. The color and blend mode can be changed from the UI to see the effect of different options.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569988708000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/graphics-samples/MediaEffects",
   "title": "MediaEffects",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "graphics"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/graphics-samples/",
   "github": "android/graphics",
   "branch": "main",
   "path": "MediaEffects/",
   "description": "This sample shows how to use the Media Effects APIs that were introduced in Android 4.0.",
   "introduction": "<p>The <a href=\"http://developer.android.com/reference/android/media/effect/package-summary.html\">Media Effects APIs</a> lets you apply effects to image frames represented as OpenGL ES 2.0 textures. Image frames can be images loaded from disk, frames from the device's camera, or other video streams.</p>\n<p>For a list of available effects, refer to <a href=\"http://developer.android.com/reference/android/media/effect/EffectFactory.html\">EffectsFactory</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/graphics-samples/main/MediaEffects/screenshots/menu.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/graphics-samples/main/MediaEffects/screenshots/duotone.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.effect.Effect",
     "link": "https://developer.android.com/reference/android/media/effect/Effect.html"
    },
    {
     "namespace": "android",
     "name": "android.media.effect.EffectContext",
     "link": "https://developer.android.com/reference/android/media/effect/EffectContext.html"
    },
    {
     "namespace": "android",
     "name": "android.media.effect.EffectFactory",
     "link": "https://developer.android.com/reference/android/media/effect/EffectFactory.html"
    },
    {
     "namespace": "android",
     "name": "android.opengl.GLSurfaceView",
     "link": "https://developer.android.com/reference/android/opengl/GLSurfaceView.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571113886000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/graphics-samples/PdfRendererBasic",
   "title": "PdfRendererBasic",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "graphics"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/graphics-samples/",
   "github": "android/graphics",
   "branch": "main",
   "path": "PdfRendererBasic/",
   "description": "This sample demonstrates how to display PDF document on screen using the PdfRenderer introduced in Android 5.0 Lollipop.",
   "introduction": "<p>You can now render PDF document pages into bitmap images for printing by using the new <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html\">PdfRenderer</a> class. You must specify a <a href=\"https://developer.android.com/reference/android/os/ParcelFileDescriptor.html\">ParcelFileDescriptor</a> that is seekable (that is, the content can be randomly accessed) on which the system writes the the printable content. Your app can obtain a page for rendering with <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#openPage(int)\">openPage()</a>, then call <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#render(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.Matrix,%20int)\">render()</a> to turn the opened <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html\">PdfRenderer.Page</a> into a bitmap.</p>\n<p>This sample loads the PDF from assets. Contents of assets are compressed by default, and the PdfRenderer class cannot open it. In this sample, we work around this by copying the file into the cache directory.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/graphics-samples/main/PdfRendererBasic/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.graphics.pdf.PdfRenderer",
     "link": "https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1590653289000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/graphics-samples/PdfRendererBasicKotlin",
   "title": "PdfRendererBasic (Kotlin)",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 27</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "graphics"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/graphics-samples/",
   "github": "android-PdfRendererBasic",
   "branch": "main",
   "path": "PdfRendererBasicKotlin/",
   "description": "This sample demonstrates how to display PDF document on screen using the PdfRenderer introduced in Android 5.0 Lollipop.",
   "introduction": "<p>You can now render PDF document pages into bitmap images for printing by using the new <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html\">PdfRenderer</a> class. You must specify a <a href=\"https://developer.android.com/reference/android/os/ParcelFileDescriptor.html\">ParcelFileDescriptor</a> that is seekable (that is, the content can be randomly accessed) on which the system writes the the printable content. Your app can obtain a page for rendering with <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html#openPage(int)\">openPage()</a>, then call <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html#render(android.graphics.Bitmap,%20android.graphics.Rect,%20android.graphics.Matrix,%20int)\">render()</a> to turn the opened <a href=\"https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.Page.html\">PdfRenderer.Page</a> into a bitmap.</p>\n<p>This sample loads the PDF from assets. Contents of assets are compressed by default, and the PdfRenderer class cannot open it. In this sample, we work around this by copying the file into the cache directory.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/graphics-samples/main/PdfRendererBasicKotlin/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.graphics.pdf.PdfRenderer",
     "link": "https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1590653289000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/identity-samples/AccountTransferApi",
   "title": "Account Transfer Api App",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "technologies": [
    "android"
   ],
   "categories": [
    "identity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/identity-samples/",
   "github": "android/identity",
   "branch": "main",
   "path": "AccountTransferApi/",
   "description": "A sample app demonstrating how to use AccountTransferApi to transfer accounts during the setup of a new device.",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.credentials.Credential",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/Credential"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624898382000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/identity-samples/CredentialsQuickstart",
   "title": "credentials-quickstart",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "technologies": [
    "android"
   ],
   "categories": [
    "identity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/identity-samples/",
   "github": "android/identity",
   "branch": "main",
   "path": "CredentialsQuickstart/",
   "description": "",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.credentials.Credential",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/Credential"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624898382000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/identity-samples/CredentialsSignIn",
   "title": "Credentials API + Google Sign In API Quickstart",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "technologies": [
    "android"
   ],
   "categories": [
    "identity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/identity-samples/",
   "github": "android/identity",
   "branch": "main",
   "path": "CredentialsSignIn/",
   "description": "This sample demonstrates how to use both the Credentials API (SmartLock for Passwords) and the Google Sign In API in the same application.\nFor more information, visit https://developers.google.com/identity/",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.credentials.Credential",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/Credential"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624898382000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/identity-samples/SmsVerification",
   "title": "SMS Verify App",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "technologies": [
    "android"
   ],
   "categories": [
    "identity"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/identity-samples/",
   "github": "android/identity",
   "branch": "main",
   "path": "SmsVerification/",
   "description": "This sample demonstrates the use of Play Service's SMS Verification APIs to get access to specially-tagged text messages (the tags associate the message with the APK) without needing full SMS retrieval permission (SMS_READ).",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.credentials.Credential",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/credentials/Credential"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624898382000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/AutofillFramework",
   "title": "AutofillFramework",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 26</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "AutofillFramework/",
   "description": "This sample demonstrates the use of the Autofill Framework. It includes implementations of client Activities with views that should be autofilled, and a Service that can provide autofill data to client Activities.",
   "introduction": "<p>This sample demonstrates the use of the Autofill framework from the service side and the client side. In practice, only a small handful of apps will develop Autofill services because a device will only have one service as default at a time, and there is just a small number of 3rd-party apps providing these services (typically password managers). However, all apps targeting O with any autofillable fields should follow the necessary steps to 1) ensure their views can be autofilled and 2) optimize their autofill performance. Most of the time, there is little to no extra code involved, but the use of custom views and views with virtual child views requires more work.</p>\n<p>The sample's Autofill service is implemented to parse the client's view hierarchy in search of autofillable fields that it has data for. If such fields exist in the hierarchy, the service sends data suggestions to the client to autofill those fields. The client uses the following attributes to specify autofill properties: <code>importantForAutofill</code>, <code>autofillHints</code>, and <code>autofillType</code>. <code>importantForAutofill</code> specifies whether the view is autofillable. <code>autofillHints</code> is a list of strings that hint to the service <strong>what</strong> data to fill the view with. This sample service only supports the hints listed <a href=\"https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE\">here</a> with the prefix AUTOFILL_HINT_*. <code>autofillType</code> tells the service the type of data it expects to receive (i.e. a list index, a date, or a string). Specifying <code>autofillType</code> is only necessary when implementing a custom view since all of the provided widgets in the UI toolkit do this for you.</p>\n<p>To set the device's default Autofill service to the one in the sample, edit <strong>Settings</strong> &gt; <strong>System</strong> &gt; <strong>Languages &amp; Input</strong> &gt; <strong>Advanced</strong> &gt; <strong>Auto-fill service</strong> and select the sample app. To edit the service's settings, tap the settings icon next to the <strong>Auto-fill service</strong> list item or open the <strong>Autofill Settings</strong> launcher icon.. Here, you can set whether you want to enable authentication on the entire autofill Response or just on individual autofill datasets. You should also set the master password to “unlock” authenticated autofill data with.</p>\n<p><strong>Note:</strong> This sample service stores all autofill data in SharedPreferences and thus is not secure. Be careful about what you store when experimenting with the sample because anyone with root access to your device will be able to view your autofill data.</p>\n<p>The client side of the app has three Activities that each have autofillable fields. The first Activity uses standard views to comprise a login form. Very little needs to be done by the client app to ensure the views get autofilled properly. The second Activity uses a custom view with virtual children, meaning some autofillable child views are not known to the View hierarchy to be child views. Supporting autofill on these child views is a little more involved.</p>\n<p>The following code snippet shows how to signal to the autofill service that a specific autofillable virtual view has come into focus:</p>\n<p><code>java class CustomVirtualView { ... // Cache AutofillManager system service mAutofillManager = context.getSystemService(AutofillManager.class); ... // Notify service which virtual view has come into focus. mAutofillManager.notifyViewEntered(CustomVirtualView.this, id, absBounds); ... // Notify service that a virtual view has left focus. mAutofillManager.notifyViewExited(CustomVirtualView.this, id); } </code></p>\n<p>Now that the autofillable view has signaled to the service that it has been autofilled, it needs to provide the virtual view hierarchy to the Autofill service. This is done out of the box for views part of the UI toolkit, but you need to implement this yourself if you have the view has virtual child views. The following code example shows the <code>View</code> method you have to override in order to provide this view hierarchy data to the Autofill service.</p>\n<p><code>java @Override public void onProvideAutofillVirtualStructure(ViewStructure structure, int flags) { // Build a ViewStructure that will get passed to the AutofillService by the framework // when it is time to find autofill suggestions. structure.setClassName(getClass().getName()); int childrenSize = mItems.size(); int index = structure.addChildCount(childrenSize); // Traverse through the view hierarchy, including virtual child views. For each view, we // need to set the relevant autofill metadata and add it to the ViewStructure. for (int i = 0; i &lt; childrenSize; i++) { Item item = mItems.valueAt(i); ViewStructure child = structure.newChild(index); child.setAutofillId(structure, item.id); child.setAutofillHints(item.hints); child.setAutofillType(item.type); child.setDataIsSensitive(!item.sanitized); child.setText(item.text); child.setAutofillValue(AutofillValue.forText(item.text)); child.setFocused(item.focused); child.setId(item.id, getContext().getPackageName(), null, item.line.idEntry); child.setClassName(item.getClassName()); index++; } } </code></p>\n<p>After the service processes the Autofill request and sends back a series of Autofill <code>Datasets</code> (wrapped in a <code>Response</code> object), the user can pick which <code>Dataset</code> they want to autofill their views with. When a <code>Dataset</code> is selected, this method is invoked for all of the views that were associated with that <code>Dataset</code> by the service. For example, the <code>Dataset</code> might contain Autofill values for username, password, birthday, and address. This method would then be invoked on all four of those fields. The following code example shows how the sample app implements the method to deliver a UI update to the appropriate child view after the user makes their selection.</p>\n<p><code>java @Override public void autofill(SparseArray&lt;AutofillValue&gt; values) { // User has just selected a Dataset from the list of autofill suggestions. // The Dataset is comprised of a list of AutofillValues, with each AutofillValue meant // to fill a specific autofillable view. Now we have to update the UI based on the // AutofillValues in the list. for (int i = 0; i &lt; values.size(); i++) { final int id = values.keyAt(i); final AutofillValue value = values.valueAt(i); final Item item = mItems.get(id); if (item != null &amp;&amp; item.editable) { // Set the item's text to the text wrapped in the AutofillValue. item.text = value.getTextValue(); } else if (item == null) { // Component not found, so no-op. } else { // Component not editable, so no-op. } } postInvalidate(); } </code></p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/1_MainPage.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/2_SampleLoginEditTexts.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/3_SampleLoginEditTextsAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/4_WelcomeActivity.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/5_SampleLoginCustomVirtualView.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/6_SampleLoginCustomVirtualViewAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/7_SampleCheckOutSpinnersAutofillable.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/8_SampleCheckOutSpinnersAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/9_SettingsActivity.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/10_AuthNeeded.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFramework/screenshots/11_AuthActivity.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.View",
     "link": "https://developer.android.com/reference/android/view/View.html"
    },
    {
     "namespace": "android",
     "name": "android.service.autofill.AutoFillService",
     "link": "https://developer.android.com/reference/android/service/autofill/AutoFillService.html"
    },
    {
     "namespace": "android",
     "name": "android.view.autofill.AutoFillManager",
     "link": "https://developer.android.com/reference/android/view/autofill/AutoFillManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568222103000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/AutofillFrameworkKotlin",
   "title": "Warning: This sample is currently outdated and you should reference the Java version instead.",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK Preview O</li> \n <li>Android Studio 3.0+</li> \n <li>Android Build Tools v26+</li> \n <li>Android Support Repository v26+</li> \n <li>Gradle v3.0+</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "AutofillFrameworkKotlin/",
   "description": "Android AutofillFramework Sample (Kotlin)\nThis sample demonstrates the use of the Autofill Framework. It includes implementations of client Activities with views that should be autofilled, and a Service that can provide autofill data to client Activities.",
   "introduction": "<p>This sample demonstrates the use of the Autofill framework from the service side and the client side. In practice, only a small handful of apps will develop Autofill services because a device will only have one service as default at a time, and there is just a small number of 3rd-party apps providing these services (typically password managers). However, all apps targeting O with any autofillable fields should follow the necessary steps to 1) ensure their views can be autofilled and 2) optimize their autofill performance. Most of the time, there is little to no extra code involved, but the use of custom views and views with virtual child views requires more work.</p>\n<p>The sample's Autofill service is implemented to parse the client's view hierarchy in search of autofillable fields that it has data for. If such fields exist in the hierarchy, the service sends data suggestions to the client to autofill those fields. The client uses the following attributes to specify autofill properties: <code>importantForAutofill</code>, <code>autofillHints</code>, and <code>autofillType</code>. <code>importantForAutofill</code> specifies whether the view is autofillable. <code>autofillHints</code> is a list of strings that hint to the service <strong>what</strong> data to fill the view with. This sample service only supports the hints listed <a href=\"https://developer.android.com/reference/android/view/View.html#AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE\">here</a> with the prefix AUTOFILL_HINT_*. <code>autofillType</code> tells the service the type of data it expects to receive (i.e. a list index, a date, or a string). Specifying <code>autofillType</code> is only necessary when implementing a custom view since all of the provided widgets in the UI toolkit do this for you.</p>\n<p>To set the device's default Autofill service to the one in the sample, edit <strong>Settings</strong> &gt; <strong>System</strong> &gt; <strong>Languages &amp; Input</strong> &gt; <strong>Advanced</strong> &gt; <strong>Auto-fill service</strong> and select the sample app. To edit the service's settings, tap the settings icon next to the <strong>Auto-fill service</strong> list item or open the <strong>Autofill Settings</strong> launcher icon.. Here, you can set whether you want to enable authentication on the entire autofill Response or just on individual autofill datasets. You should also set the master password to “unlock” authenticated autofill data with.</p>\n<p><strong>Note:</strong> This sample service stores all autofill data in SharedPreferences and thus is not secure. Be careful about what you store when experimenting with the sample because anyone with root access to your device will be able to view your autofill data.</p>\n<p>The client side of the app has three Activities that each have autofillable fields. The first Activity uses standard views to comprise a login form. Very little needs to be done by the client app to ensure the views get autofilled properly. The second Activity uses a custom view with virtual children, meaning some autofillable child views are not known to the View hierarchy to be child views. Supporting autofill on these child views is a little more involved.</p>\n<p>The following code snippet shows how to signal to the autofill service that a specific autofillable virtual view has come into focus:</p>\n<p><code>kotlin class CustomVirtualView(context: Context, attrs: AttributeSet) : View(context, attrs) { ... // Cache AutofillManager system service private val autofillManager: AutofillManager = context.getSystemService(AutofillManager::class.java) ... // Notify service which virtual view has come into focus. autofillManager.notifyViewEntered(this@CustomVirtualView, id, absBounds) ... // Notify service that a virtual view has left focus. autofillManager.notifyViewExited(this@CustomVirtualView, id) } </code></p>\n<p>Now that the autofillable view has signaled to the service that it has been autofilled, it needs to provide the virtual view hierarchy to the Autofill service. This is done out of the box for views part of the UI toolkit, but you need to implement this yourself if you have the view has virtual child views. The following code example shows the <code>View</code> method you have to override in order to provide this view hierarchy data to the Autofill service.</p>\n<p><code>kotlin override fun onProvideAutofillVirtualStructure(structure: ViewStructure, flags: Int) { // Build a ViewStructure to pack in AutoFillService requests. structure.setClassName(javaClass.name) val childrenSize = items.size() Log.d(TAG, &quot;onProvideAutofillVirtualStructure(): flags = &quot; + flags + &quot;, items = &quot; + childrenSize + &quot;, extras: &quot; + bundleToString(structure.extras)) var index = structure.addChildCount(childrenSize) // Traverse through the view hierarchy, including virtual child views. For each view, we // need to set the relevant autofill metadata and add it to the ViewStructure. for (i in 0..childrenSize - 1) { val item = items.valueAt(i) Log.d(TAG, &quot;Adding new child at index $index: $item&quot;) val child = structure.newChild(index) child.setAutofillId(structure, item.id) child.setAutofillHints(item.hints) child.setAutofillType(item.type) child.setDataIsSensitive(!item.sanitized) child.text = item.text child.setAutofillValue(AutofillValue.forText(item.text)) child.setFocused(item.focused) child.setId(item.id, context.packageName, null, item.line.idEntry) child.setClassName(item.className) index++ } } </code></p>\n<p>After the service processes the Autofill request and sends back a series of Autofill <code>Datasets</code> (wrapped in a <code>Response</code> object), the user can pick which <code>Dataset</code> they want to autofill their views with. When a <code>Dataset</code> is selected, this method is invoked for all of the views that were associated with that <code>Dataset</code> by the service. For example, the <code>Dataset</code> might contain Autofill values for username, password, birthday, and address. This method would then be invoked on all four of those fields. The following code example shows how the sample app implements the method to deliver a UI update to the appropriate child view after the user makes their selection.</p>\n<p><code>kotlin override fun autofill(values: SparseArray&lt;AutofillValue&gt;) { // User has just selected a Dataset from the list of autofill suggestions. // The Dataset is comprised of a list of AutofillValues, with each AutofillValue meant // to fill a specific autofillable view. Now we have to update the UI based on the // AutofillValues in the list. for (i in 0..values.size() - 1) { val id = values.keyAt(i) val value = values.valueAt(i) items[id]?.let { item -&gt; if (item.editable) { // Set the item's text to the text wrapped in the AutofillValue. item.text = value.textValue } else { // Component not editable, so no-op. } } } postInvalidate() } </code></p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/1_MainPage.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/2_SampleLoginEditTexts.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/3_SampleLoginEditTextsAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/4_WelcomeActivity.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/5_SampleLoginCustomVirtualView.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/6_SampleLoginCustomVirtualViewAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/7_SampleCheckOutSpinnersAutofillable.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/8_SampleCheckOutSpinnersAutofilled.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/9_SettingsActivity.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/10_AuthNeeded.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/AutofillFrameworkKotlin/screenshots/11_AuthActivity.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.View",
     "link": "https://developer.android.com/reference/android/view/View.html"
    },
    {
     "namespace": "android",
     "name": "android.service.autofill.AutoFillService",
     "link": "https://developer.android.com/reference/android/service/autofill/AutoFillService.html"
    },
    {
     "namespace": "android",
     "name": "android.view.autofill.AutoFillManager",
     "link": "https://developer.android.com/reference/android/view/autofill/AutoFillManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568222116000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/BasicGestureDetect",
   "title": "BasicGestureDetect",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "BasicGestureDetect/",
   "description": "This sample detects gestures on a view and logs them. In order to try this sample out, try dragging or tapping the text.",
   "introduction": "<p>In this sample, the gestures are detected using a custom gesture listener that extends <a href=\"http://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html\">SimpleOnGestureListener</a> and writes the detected <a href=\"http://developer.android.com/reference/android/view/MotionEvent.html\">MotionEvent</a> into the log.</p>\n<p>In this example, the steps followed to set up the gesture detector are: 1. Create the GestureListener that includes all your callbacks. 2. Create the GestureDetector (<a href=\"http://developer.android.com/reference/android/view/GestureDetector.SimpleOnGestureListener.html\">SimpleOnGestureListener</a>) that will take the listener as an argument. 3. For the view where the gestures will occur, create an <a href=\"http://developer.android.com/reference/android/view/View.OnTouchListener.html\">onTouchListener</a> that sends all motion events to the gesture detector.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/BasicGestureDetect/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.GestureDetector",
     "link": "https://developer.android.com/reference/android/view/GestureDetector.html"
    },
    {
     "namespace": "android",
     "name": "android.view.MotionEvent",
     "link": "https://developer.android.com/reference/android/view/MotionEvent.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568222127000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/BasicMultitouch",
   "title": "BasicMultitouch",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "BasicMultitouch/",
   "description": "Sample demonstrates the use of <a href=\"http://developer.android.com/reference/android/view/MotionEvent.html\">MotionEvent</a> properties to keep track of individual touches across multiple touch events.",
   "introduction": "<p>This is an example of keeping track of individual touches across multiple <a href=\"http://developer.android.com/reference/android/view/MotionEvent.html\">MotionEvent</a>s.</p>\n<p>This sample uses a custom View (<code>TouchDisplayView</code>) that responds to touch events and draws a colored circle for each touch point. The view holds data related to a touch pointer, including its current position, pressure, and its past touch history.</p>\n<p>The View draws graphics based on data associated with each touch event to a canvas. A large circle indicates the current position of a touch, while smaller trailing circles represent previous positions for that touch. The size of the large circle is scaled depending on the pressure of the user's touch.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/BasicMultitouch/screenshots/intro.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/input-samples/main/BasicMultitouch/screenshots/touches.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.MotionEvent",
     "link": "https://developer.android.com/reference/android/view/MotionEvent.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568222143000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/CommitContentSampleApp",
   "title": "CommitContentSampleApp",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "CommitContentSampleApp/",
   "description": "This sample demonstrates how to write an application which accepts rich content (such as images) sent from a keyboard using the Commit Content API.",
   "introduction": "<p>Users often want to communicate with emojis, stickers, and other kinds of rich content. In previous versions of Android, soft keyboards (input method editors or IMEs) could send only unicode emoji to apps. For rich content (such as images), apps had to either build app-specific APIs that couldn't be used in other apps or use workarounds like sending images through the Easy Share Action or the clipboard.</p>\n<p>Now in Android 7.1 (API 25), the Android SDK includes the <a href=\"https://android-dot-devsite.googleplex.com/preview/image-keyboard.html\">Commit Content API</a>, which provides a universal way for IMEs to send images and other rich content directly to a text editor in an app. The API is also available in the v13 Support Library (ver. 25.0), supporting devices as early as Android 3.2 (API 13).</p>\n<p>With this API, you can build messaging apps that accept rich content from any keyboard, as well as keyboards that can send rich content to any app.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/CommitContentSampleApp/screenshots/screenshot1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.widget.EditText",
     "link": "https://developer.android.com/reference/android/widget/EditText.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.EditorInfoCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/EditorInfoCompat.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.InputConnectionCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/InputConnectionCompat.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.InputContentInfoCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/InputContentInfoCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568727240000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/input-samples/CommitContentSampleIME",
   "title": "CommitContentSampleIME",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "input"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/input-samples/",
   "github": "android/input",
   "branch": "main",
   "path": "CommitContentSampleIME/",
   "description": "This sample demonstrates how to write an keyboard which sends rich content (such as images) to text fields using the Commit Content API.",
   "introduction": "<p>Users often want to communicate with emojis, stickers, and other kinds of rich content. In previous versions of Android, soft keyboards (input method editors or IMEs) could send only unicode emoji to apps. For rich content (such as images), apps had to either build app-specific APIs that couldn't be used in other apps or use workarounds like sending images through the Easy Share Action or the clipboard.</p>\n<p>Now in Android 7.1 (API 25), the Android SDK includes the <a href=\"https://android-dot-devsite.googleplex.com/preview/image-keyboard.html\">Commit Content API</a>, which provides a universal way for IMEs to send images and other rich content directly to a text editor in an app. The API is also available in the v13 Support Library (ver. 25.0), supporting devices as early as Android 3.2 (API 13).</p>\n<p>With this API, you can build messaging apps that accept rich content from any keyboard, as well as keyboards that can send rich content to any app.</p>\n<p><strong>Note:</strong> This sample does not have a default Activity. After installing it, you will need to enable this app as a keyboard by navigating to <em>Settings &gt; Languages &amp; Input &gt; Virtual Keyboard &gt; Manage Keyboards</em>. This keyboard can then be accessed by pressing the virtual keyboard icon in the lower-right hand corner of the display while in a text field.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/input-samples/main/CommitContentSampleIME/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.widget.EditText",
     "link": "https://developer.android.com/reference/android/widget/EditText.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.EditorInfoCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/EditorInfoCompat.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.InputConnectionCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/InputConnectionCompat.html"
    },
    {
     "namespace": "android",
     "name": "import android.support.v13.view.inputmethod.InputContentInfoCompat",
     "link": "https://developer.android.com/reference/import android/support/v13/view/inputmethod/InputContentInfoCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568222167000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/ActivityRecognition",
   "title": "Recognizing the User's Current Activity",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "ActivityRecognition/",
   "description": "Demonstrates use of the <a href=\"https://developer.android.com/reference/com/google/android/gms/location/ActivityRecognitionApi.html\">ActivityRecognitionApi</a> to recognize a user's current activity, such as walking, driving, or standing still.\nIntroduction\nDemonstrates use of the <a href=\"https://developer.android.com/reference/com/google/android/gms/location/ActivityRecognitionApi.html\">ActivityRecognitionApi</a> to recognize a user's current activity, such as walking, driving, or standing still.\nUsers can request activity updates by pressing the &quot;Request Updates&quot; button, and stop receiving updates using the &quot;Remove Updates&quot; button.\nThe sample uses an <code>IntentService</code> to process detected activity changes, which are sent using <a href=\"https://developer.android.com/reference/com/google/android/gms/location/ActivityRecognitionResult.html\">ActivityRecognitionResult</a> objects. The IntentService gets a list of probable detected activities and broadcasts them through a BroadcastReceiver. See the <a href=\"https://developer.android.com/reference/com/google/android/gms/location/DetectedActivity.html\">DetectedActivity</a> class for a list of DetectedActivity types. Each <code>DetectedActivity</code> is associated with a confidence level, which is an int between 0 and 100.\nTo run this sample, <strong>location must be enabled</strong>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1603625381000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/AwarenessApisSampleKotlin",
   "title": "Awareness API sample (Snapshot API)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "location",
    "context"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "AwarenessApisSampleKotlin/",
   "description": "Demonstrates use of the <a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/Awareness#getSnapshotClient(android.app.Activity)\">Awareness</a> APIs to intelligently react to the current situation of the user.\nIntroduction\nThe Awareness API exposes five different context types, which include user activity, and nearby beacons. These types enable your app to refine the user experience in new ways that were not possible before. Your app can combine these context signals to make inferences about the current situation of the user, and use this information to provide customized experiences, such as a playlist suggestion when the user plugs in their headphones and starts to jog.\nThis sample demonstrates the Snapshot API to get information about the current environment of the user.\nDevelopers can find more about this API and other Awareness APIs in our <a href=\"https://developers.google.com/awareness/overview\">Getting Started page</a>.\nUsers can request the current environment by pressing the &quot;Request Snapshot&quot; button.\n<strong>IMPORTANT NOTE</strong>: The Awareness APIs (both Snapshot and Fend) require an API key in your manifest. Check <a href=\"https://developers.google.com/awareness/android-api/get-a-key\">this link</a> for more information.",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.awareness.snapshot.DetectedActivityResponse",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/awareness/snapshot/DetectedActivityResponse"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.location.ActivityRecognitionResult",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/location/ActivityRecognitionResult"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1613604180000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/BasicLocation",
   "title": "Basic Location (Java)",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "BasicLocation/",
   "description": "Demonstrates use of the Google Play services Location API to retrieve the last known location for a device.\nIntroduction\nThis sample shows a simple way of getting a device's last known location, which is usually equivalent to the device's current location. The accuracy of the location returned is based on the location permissions you've requested and the location sensors that are currently active for the device.\nTo run this sample, <strong>location must be enabled</strong>.\nThis sample uses <a href=\"https://developer.android.com/reference/com/google/android/gms/location/LocationServices.html\">FusedLocationProviderClient</a>.\nAlso see the <a href=\"../kotlin\">Kotlin version</a> of this sample.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/BasicLocationKotlin",
   "title": "Basic Location (Kotlin)",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "BasicLocationKotlin/",
   "description": "Demonstrates use of the Google Play services Location API to retrieve the last known location for a device.\nIntroduction\nThis sample shows a simple way of getting a device's last known location, which is usually equivalent to the device's current location. The accuracy of the location returned is based on the location permissions you've requested and the location sensors that are currently active for the device.\nTo run this sample, <strong>location must be enabled</strong>.\nThis sample uses <a href=\"https://developer.android.com/reference/com/google/android/gms/location/LocationServices.html\">FusedLocationProviderClient</a>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/Geofencing",
   "title": "Creating and Monitoring Geofences",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "Geofencing/",
   "description": "Demonstrates how to create and remove geofences using the <a href=\"https://developer.android.com/reference/com/google/android/gms/location/GeofencingApi.html\">GeofencingApi</a>. Monitor geofence transitions and creates notifications whenever a device enters or exits a geofence.\nIntroduction\nGeofencing combines awareness of the user's current location with awareness of nearby features, defined as the user's proximity to locations that may be of interest. To mark a location of interest, you specify its latitude and longitude. To adjust the proximity for the location, you add a radius. The latitude, longitude, and radius define a geofence. You can have multiple active geofences at one time.\nLocation Services treats a geofences as an area rather than as a points and proximity. This allows it to detect when the user enters or exits a geofence. For each geofence, you can ask Location Services to send you entrance events, exit events, or both. You can also limit the duration of a geofence by specifying an expiration duration in milliseconds. After the geofence expires, Location Services automatically removes it.\nTo run this sample, <strong>location must be enabled</strong>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/LocationAddress",
   "title": "Location Updates (Java)",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "LocationAddress/",
   "description": "Demonstrates how to use the <a href=\"http://developer.android.com/reference/android/location/Geocoder.html\">Geocode API</a> and reverse geocoding to display a device's location as an address.\nIntroduction\nThis sample builds on the BasicLocationSample and the LocationUdpates samples included in this repo. Those samples work with latitude and longitude values only. While latitude and longitude are useful for calculating distance or displaying a map position, in many cases the address of the location is more useful. The Android framework location APIs provide a <a href=\"http://developer.android.com/reference/android/location/Geocoder.html\">Geocode API</a> which contains a [getFromLocation()](http://developer.android.com/reference/android/location/Geocoder.html#getFromLocation(double, double, int)) method that returns an estimated street address corresponding to a given latitude and longitude. This sample uses the <code>getFromLocation()</code> method to do location address lookup, an IntentService to fetch the location address, and a ResultReceiver to process results sent by the IntentService.\nTo run this sample, <strong>location must be enabled</strong>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/LocationAddressKotlin",
   "title": "Location Updates (Kotlin)",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "LocationAddressKotlin/",
   "description": "Demonstrates how to use the <a href=\"http://developer.android.com/reference/android/location/Geocoder.html\">Geocode API</a> and reverse geocoding to display a device's location as an address.\nIntroduction\nThis sample builds on the BasicLocationSample and the LocationUdpates samples included in this repo. Those samples work with latitude and longitude values only. While latitude and longitude are useful for calculating distance or displaying a map position, in many cases the address of the location is more useful. The Android framework location APIs provide a <a href=\"http://developer.android.com/reference/android/location/Geocoder.html\">Geocode API</a> which contains a [getFromLocation()]http://developer.android.com/reference/android/location/Geocoder.html#getFromLocation(double, double, int)) method that returns an estimated street address corresponding to a given latitude and longitude. This sample uses the <code>getFromLocation()</code> method to do location address lookup, an IntentService to fetch the location address, and a ResultReceiver to process results sent by the IntentService.\nTo run this sample, <strong>location must be enabled</strong>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/LocationUpdates",
   "title": "Location Updates",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "LocationUpdates/",
   "description": "Demonstrates how to use the Fused Location Provider API to get updates about a device's location. The Fused Location Provider is part of the Google Play services Location APIs.\nIntroduction\nThis sample builds on the BasicLocationSample sample included in this repo, and allows the user to request periodic location updates. In response, the API updates the app periodically with the best available location, based on the currently-available location providers such as WiFi and GPS (Global Positioning System). The accuracy of the location is also determined by the location permissions you've requested (we use the ACCESS_FINE_LOCATION here) and the options you set in the location request.\nThis sample uses the <a href=\"https://developer.android.com/reference/com/google/android/gms/location/LocationServices.html\">FusedLocationProviderClient</a>.\nTo run this sample, <strong>location must be enabled</strong>.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1571437954000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/location-samples/LocationUpdatesBackgroundKotlin",
   "title": "Location Updates in the Background (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "location"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/location-samples/",
   "github": "android/location-samples",
   "branch": "main",
   "path": "LocationUpdatesBackgroundKotlin/",
   "description": "Demonstrates retrieving location updates in the background.\nIntroduction\nThis app allows a user to receive location updates in the background via a <code>PendingIntent</code>.\nIf you are just interested in seeing the code that subscribes to a location request, please review the <strong><code>MyLocationManager</code></strong> file and the <strong><code>LocationUpdatesBroadcastReceiver</code></strong> file for the BroadcastReceiver triggered by location changes.\nUsers have four options in Android 11+ regarding location: * One time only * Allow while app is in use, i.e., while app is in foreground * Allow all the time * Not allow location at all\nIn addition to the FINE location permission (<code>android.permission.ACCESS_FINE_LOCATION</code>), if you do have an approved use case for receiving location updates in the background, it will require an additional permission (<code>android.permission.ACCESS_BACKGROUND_LOCATION</code>).\nTo run this sample, <strong>location must be enabled</strong>.\n<strong>IMPORTANT NOTE</strong>: You should generally prefer 'while-in-use' for location updates, i.e., receiving location updates while the app is in use and create a foreground service (tied to a Notification) when the user navigates away from the app. To learn how to do that instead, review the <a href=\"https://codelabs.developers.google.com/codelabs/while-in-use-location/index.html?index=..%2F..index#0\">Receive location updates in Android 10 with Kotlin</a> codelab.",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.location.FusedLocationProviderClient",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/location/FusedLocationProviderClient"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.location.LocationRequest",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/location/LocationRequest"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.location.LocationServices",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/location/LocationServices"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1614107235000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/BasicMediaDecoder",
   "title": "BasicMediaDecoder",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "BasicMediaDecoder/",
   "description": "This sample shows how to use the MediaCoder to decode a video, use a TimeAnimator to sync the rendering commands with the system display frame rendering and finally render it to a TextureView.",
   "introduction": "<p><a href=\"http://developer.android.com/reference/android/media/MediaCodec.html\">MediaCodec</a> was introduced in API 16, and can be used for low level (decoding/encoding) operations. In the same API was also introduced <a href=\"http://developer.android.com/reference/android/animation/TimeAnimator.html\">TimeAnimator</a>, which can be used to synchronise animation frames. Finally, <a href=\"http://developer.android.com/reference/android/media/MediaExtractor.html\">MediaExtractor</a> provides a simple way to extract demuxed media data from a data source.</p>\n<p>The main steps are described below:</p>\n<ol> \n <li>Create a layout with a <a href=\"http://developer.android.com/reference/android/view/TextureView.html\">TextureView</a> for your activity.</li> \n <li>Initialise a MediaExtractor instance with <code>new MediaExtractor()</code> and a TimeAnimator instance with <code>new TimeAnimator()</code>.</li> \n <li>To start video playback, call <code>setDataSource(this, videoUri, null)</code> on your MediaExtractor instance, where <code>videoUri</code> is the URI of your video source.</li> \n <li>On your MediaExtractor instance, call <code>getTrackCount()</code> to know how many tracks you have in your streams. They may not all be video tracks. Deselect all tracks by calling <code>unselectTrack(i)</code> where <code>i</code> is the index of the track.</li> \n <li>Get the mime type of a track by calling <code>getTrackFormat(i).getString(MediaFormat.KEY_MIME)</code> on your MediaExtractor instance, where <code>i</code> is the index of your selected track. If the mime type contains &quot;video/&quot;, then this is a video track so you can select it, using <code>selectTrack(i)</code> on your MediaExtractor instance.</li> \n <li>Create a MediaCodec instance by calling <code>MediaCodec.createDecoderByType(mimeType)</code>.</li> \n <li>Configure your MediaCodec instance with <code>configure(trackFormat, textureView, null, 0)</code>, where <code>trackFormat</code> is obtained by calling <code>getTrackFormat(i)</code> on your MediaExtractor instance.</li> \n <li>Set a TimeListener on your TimeAnimation instance, and override its <code>onTimeUpdate(final TimeAnimator animation, final long totalTime, final long deltaTime)</code> method.</li> \n <li>In <code>onTimeUpdate</code>, check if the media track has reached the end of stream, using <code>getSampleFlags()</code> on your MediaExtractor instance and looking for <code>MediaCodec.BUFFER_FLAG_END_OF_STREAM</code> flag.</li> \n <li>Still in <code>onTimeUpdate</code>, assuming this isn't the end of the sample, write the media sample to your MediaDecoder instance, using <code>queueInputBuffer(index, 0, size, presentationTimeUs, flags)</code> method. You will need to set up your buffers, refer to <a href=\"http://developer.android.com/reference/android/media/MediaCodec.html\">MediaCodec</a> documentation for details.</li> \n <li>After writing the media sample, you need to advance the sample, calling <code>advance()</code> on your TimeExtractor instance (this is a blocking operation and should be done outside the main thread).</li> \n <li>Finally, you can release and render the media sample by calling <code>dequeueOutputBuffer(info, timeout)</code> and <code>releaseOutputBuffer(i, true)</code>, refer to <a href=\"http://developer.android.com/reference/android/media/MediaCodec.html\">MediaCodec</a> documentation for details.</li> \n <li>In <code>onPause()</code> or if you have reached the end of the stream, call <code>end()</code> on your TimeAnimation instance, then call <code>stop()</code> and <code>release()</code> on your MediaCodec instance, and finally, call <code>release()</code> on your MediaExtractor instance.</li> \n</ol>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/BasicMediaDecoder/screenshots/1-launch.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/media-samples/main/BasicMediaDecoder/screenshots/2-play-video.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.MediaCodec",
     "link": "https://developer.android.com/reference/android/media/MediaCodec.html"
    },
    {
     "namespace": "android",
     "name": "android.media.MediaExtractor",
     "link": "https://developer.android.com/reference/android/media/MediaExtractor.html"
    },
    {
     "namespace": "android",
     "name": "android.animation.TimeAnimator",
     "link": "https://developer.android.com/reference/android/animation/TimeAnimator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569838180000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/BasicMediaRouter",
   "title": "BasicMediaRouter",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "BasicMediaRouter/",
   "description": "This sample demonstrates the use of the MediaRouter API to display content on a secondary display. Use the &quot;Media Route Action Item&quot; in the ActionBar to select an output device. If your device supports Miracast wireless displays, you may need to enable &quot;Wireless Display&quot; functionality in the system settings. Secondary screen simulation can also be enabled from the &quot;Developer Options&quot;.\nOnce connected, use the &quot;Change Color&quot; button to change the background color of the secondary screen.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569975150000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/MediaRecorder",
   "title": "MediaRecorder",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "MediaRecorder/",
   "description": "This sample uses the camera/camcorder as the A/V source for the MediaRecorder API. A TextureView is used as the camera preview which limits the code to API 14+. This can be easily replaced with a SurfaceView to run on older devices.",
   "introduction": "<p>This sample shows how to use the <a href=\"https://developer.android.com/reference/android/media/MediaRecorder.html\">MediaRecorder</a> API. It uses the <a href=\"https://developer.android.com/reference/android/graphics/Camera.html\">Camera</a> as input source and displays a preview on a <a href=\"https://developer.android.com/reference/android/view/TextureView.html\">TextureView</a> The sample features a button to capture the input and stop capturing afterwards.</p>\n<p>It demonstrates how to correctly gain control and release the camera. The sample also shows how to save the captured audio and video to persistant storage and basic error handling.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/MediaRecorder/screenshots/screenshot1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/media-samples/main/MediaRecorder/screenshots/screenshot2.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.Camera",
     "link": "https://developer.android.com/reference/android/hardware/Camera.html"
    },
    {
     "namespace": "android",
     "name": "android.media.CamcorderProfile",
     "link": "https://developer.android.com/reference/android/media/CamcorderProfile.html"
    },
    {
     "namespace": "android",
     "name": "android.media.MediaRecorder",
     "link": "https://developer.android.com/reference/android/media/MediaRecorder.html"
    },
    {
     "namespace": "android",
     "name": "android.view.TextureView",
     "link": "https://developer.android.com/reference/android/view/TextureView.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1573193803000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/MediaRouter",
   "title": "MediaRouter",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "MediaRouter/",
   "description": "Demonstrates how to create a custom media route provider.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569926937000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/MidiScope",
   "title": "MidiScope",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "MidiScope/",
   "description": "Sample demonstrating how to use the MIDI API to receive and process MIDI signals coming from an attached device.",
   "introduction": "<p>The Android MIDI API ([android.media.midi][1]) allows developers to connect a MIDI device to Android and process MIDI signals coming from it. This sample demonstrates some basic features of the MIDI API, such as enumeration of currently available devices (Information includes name, vendor, capabilities, etc), notification when MIDI devices are plugged in or unplugged, and receiving MIDI signals. This sample simply shows all the received MIDI signals to the screen log and does not play any sound for them. [1]: https://developer.android.com/reference/android/media/midi/package-summary.html</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/MidiScope/screenshots/1-main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/media-samples/main/MidiScope/screenshots/2-signals.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.midi.MidiManager",
     "link": "https://developer.android.com/reference/android/media/midi/MidiManager.html"
    },
    {
     "namespace": "android",
     "name": "android.media.midi.MidiReceiver",
     "link": "https://developer.android.com/reference/android/media/midi/MidiReceiver.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569838180000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/MidiSynth",
   "title": "MidiSynth",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "MidiSynth/",
   "description": "Sample demonstrating how to use the MIDI API to receive and play MIDI messages coming from an attached input device (MIDI keyboard).",
   "introduction": "<p>The Android MIDI API (<a href=\"https://developer.android.com/reference/android/media/midi/package-summary.html\">android.media.midi</a>) allows developers to connect a MIDI device to an Android device and process MIDI messages coming from it.</p>\n<p>This sample demonstrates some basic features of the MIDI API, such as:</p>\n<ul> \n <li>Enumeration of currently available devices (including name, vendor, capabilities, etc)</li> \n <li>Notification when MIDI devices are plugged in or unplugged</li> \n <li>Receiving and processing MIDI messages</li> \n</ul>\n<p>This sample contains a simple implementation of an oscillator and note playback.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/MidiSynth/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.midi.MidiManager",
     "link": "https://developer.android.com/reference/android/media/midi/MidiManager.html"
    },
    {
     "namespace": "android",
     "name": "android.media.midi.MidiReceiver",
     "link": "https://developer.android.com/reference/android/media/midi/MidiReceiver.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569838180000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/PictureInPicture",
   "title": "PictureInPicture",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "PictureInPicture/",
   "description": "This sample demonstrates basic usage of Picture-in-Picture mode for handheld devices. The sample plays a video. The video keeps on playing when the app is turned in to Picture-in-Picture mode. On Picture-in-Picture screen, the app shows an action item to pause or resume the video.",
   "introduction": "<p>As of Android O, activities can launch in <a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture.html\">Picture-in-Picture (PiP)</a> mode. PiP is a special type of <a href=\"https://developer.android.com/guide/topics/ui/multi-window.html\">multi-window</a> mode mostly used for video playback.</p>\n<p>The app is <em>paused</em> when it enters PiP mode, but it should continue showing content. For this reason, you should make sure your app does not pause playback in its <a href=\"https://developer.android.com/reference/android/app/Activity.html#onPause()\">onPause()</a> handler. Instead, you should pause video in <a href=\"https://developer.android.com/reference/android/app/Activity.html#onStop()\">onStop()</a>. For more information, see <a href=\"https://developer.android.com/guide/topics/ui/multi-window.html#lifecycle\">Multi-Window Lifecycle</a>.</p>\n<p>To specify that your activity can use PIP mode, set <code>android:supportsPictureInPicture</code> to <code>true</code> in the manifest. (Beginning with Android O, you do not need to set <code>android:resizeableActivity</code> to <code>true</code> if you are supporting PIP mode you only need to <code>setrandroid:resizeableActivity</code> if your activity supports other multi-window modes.)</p>\n<p>You can pass a <a href=\"https://developer.android.com/reference/android/app/PictureInPictureParams.html\">PictureInPictureParams</a> to <a href=\"https://developer.android.com/reference/android/app/Activity.html#enterPictureInPictureMode(android.app.PictureInPictureParams)\">enterPictureInPictureMode()</a> to specify how an activity should behave when it is in PiP mode. You can also use it to call <a href=\"https://developer.android.com/reference/android/app/Activity.html#setPictureInPictureParams(android.app.PictureInPictureParams)\">setPictureInPictureParams()</a> and update the current behavior. If the app is in not PiP mode, it will be used for later call of <a href=\"https://developer.android.com/reference/android/app/Activity.html#enterPictureInPictureMode(android.app.PictureInPictureParams)\">enterPictureInPictureMode()</a>.</p>\n<p>With a <a href=\"https://developer.android.com/reference/android/app/PictureInPictureParams.html\">PictureInPictureParams</a>, you can specify aspect ratio of PiP activity and action items available for PiP mode. The aspect ratio is used when the activity is in PiP mode. The action items are used as menu items in PiP mode. You can use a <a href=\"https://developer.android.com/reference/android/app/PendingIntent.html\">PendingIntent</a> to specify what to do when the item is selected.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/PictureInPicture/screenshots/1-main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/media-samples/main/PictureInPicture/screenshots/2-pip.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.PictureInPictureParams",
     "link": "https://developer.android.com/reference/android/app/PictureInPictureParams.html"
    },
    {
     "namespace": "android",
     "name": "android.app.RemoteAction",
     "link": "https://developer.android.com/reference/android/app/RemoteAction.html"
    },
    {
     "namespace": "android",
     "name": "android.app.PendingIntent",
     "link": "https://developer.android.com/reference/android/app/PendingIntent.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.media.session.MediaSessionCompat",
     "link": "https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1615470467000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/PictureInPictureKotlin",
   "title": "PictureInPicture (Kotlin)",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "PictureInPictureKotlin/",
   "description": "This sample demonstrates basic usage of Picture-in-Picture mode for handheld devices. The sample plays a video. The video keeps on playing when the app is turned in to Picture-in-Picture mode. On Picture-in-Picture screen, the app shows an action item to pause or resume the video.",
   "introduction": "<p>As of Android 8.0 Oreo (API level 26), activities can launch in <a href=\"https://developer.android.com/guide/topics/ui/picture-in-picture.html\">Picture-in-Picture (PiP)</a> mode. PiP is a special type of <a href=\"https://developer.android.com/guide/topics/ui/multi-window.html\">multi-window</a> mode mostly used for video playback.</p>\n<p>The app is <em>paused</em> when it enters PiP mode, but it should continue showing content. For this reason, you should make sure your app does not pause playback in its <a href=\"https://developer.android.com/reference/android/app/Activity.html#onPause()\">onPause()</a> handler. Instead, you should pause video in <a href=\"https://developer.android.com/reference/android/app/Activity.html#onStop()\">onStop()</a>. For more information, see <a href=\"https://developer.android.com/guide/topics/ui/multi-window.html#lifecycle\">Multi-Window Lifecycle</a>.</p>\n<p>To specify that your activity can use PIP mode, set <code>android:supportsPictureInPicture</code> to <code>true</code> in the manifest. (You do not need to set <code>android:resizeableActivity</code> to <code>true</code> if you are only supporting PIP mode, either on Android TV or on other Android devices; you only need to set <code>android:resizeableActivity</code> if your activity supports other multi-window modes.)</p>\n<p>You can pass a <a href=\"https://developer.android.com/reference/android/app/PictureInPictureParams.html\">PictureInPictureParams</a> to <a href=\"https://developer.android.com/reference/android/app/Activity.html#enterPictureInPictureMode(android.app.PictureInPictureParams)\">enterPictureInPictureMode()</a> to specify how an activity should behave when it is in PiP mode. You can also use it to call <a href=\"https://developer.android.com/reference/android/app/Activity.html#setPictureInPictureParams(android.app.PictureInPictureParams)\">setPictureInPictureParams()</a> and update the current behavior.</p>\n<p>With a <a href=\"https://developer.android.com/reference/android/app/PictureInPictureParams.html\">PictureInPictureParams</a>, you can specify aspect ratio of PiP activity and action items available for PiP mode. The aspect ratio is used when the activity is in PiP mode. The action items are used as menu items in PiP mode. You can use a <a href=\"https://developer.android.com/reference/android/app/PendingIntent.html\">PendingIntent</a> to specify what to do when the item is selected.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/PictureInPictureKotlin/screenshots/1-main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/media-samples/main/PictureInPictureKotlin/screenshots/2-pip.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.PictureInPictureParams",
     "link": "https://developer.android.com/reference/android/app/PictureInPictureParams.html"
    },
    {
     "namespace": "android",
     "name": "android.app.RemoteAction",
     "link": "https://developer.android.com/reference/android/app/RemoteAction.html"
    },
    {
     "namespace": "android",
     "name": "android.app.PendingIntent",
     "link": "https://developer.android.com/reference/android/app/PendingIntent.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.media.session.MediaSessionCompat",
     "link": "https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628229828000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/ScreenCapture",
   "title": "ScreenCapture",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "ScreenCapture/",
   "description": "This sample demonstrates how to use Media Projection API to capture device screen in real time and show it on a SurfaceView.",
   "introduction": "<p>Media Projection API lets you capture the current screen through Surface.</p>\n<p>To start media projection, you need to get an instance of <a href=\"https://developer.android.com/reference/android/media/projection/MediaProjection.html\">MediaProjection</a>. For this, you have to call startActivityForResult with an Intent from <a href=\"https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html#createScreenCaptureIntent()\">MediaProjectionManager.createScreenCaptureIntent()</a>. This shows a confirmation dialog to the user. When user confirms it, you will get a result code and data in onActivityResult, so pass those to [getMediaProjection][3].</p>\n<p>Once you get a MediaProjection, use [createVirtualDisplay][4] and bind it to a Surface.</p>\n<p>[3]: https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html#getMediaProjection(int, android.content.Intent) [4]: https://developer.android.com/reference/android/media/projection/MediaProjection.html#createVirtualDisplay(java.lang.String, int, int, int, int, android.view.Surface, android.hardware.display.VirtualDisplay.Callback, android.os.Handler)</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/media-samples/main/ScreenCapture/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.projection.MediaProjection",
     "link": "https://developer.android.com/reference/android/media/projection/MediaProjection.html"
    },
    {
     "namespace": "android",
     "name": "android.media.projection.MediaProjectionManager",
     "link": "https://developer.android.com/reference/android/media/projection/MediaProjectionManager.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.display.VirtualDisplay",
     "link": "https://developer.android.com/reference/android/hardware/display/VirtualDisplay.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1569625299000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/media-samples/VideoPlayer",
   "title": "Video Player",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 26</li> \n <li>Android Build Tools v26.0.1</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android",
    "exoplayer"
   ],
   "categories": [
    "media"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/media-samples/",
   "github": "android/media",
   "branch": "main",
   "path": "VideoPlayer/",
   "description": "This sample shows how to implement a media app that allows playback of video from local storage (assets folder in the APK) or remote sources over HTTP(S). 1. It supports playlists, so that multiple videos can be strung together to play one after the other, and skip between them. 2. It supports <code>MediaSession</code> so that external Bluetooth headphones can control your media (play, pause, skip to next, etc), and see what media is currently playing (like from a car's Bluetooth head unit). 3. It supports Audio Focus, so that you can respect Android's audio focus system and pause playback if something else is playing. 4. It supports picture in picture (PIP) so that the app's video playback can continue in a minimized window while the user is in other apps. To learn more about <code>ExoPlayer</code>, <code>MediaSession</code>, Audio Focus, and PIP, please read this series of <a href=\"https://goo.gl/HpTnka\">articles on Medium</a> that goes into the details of these APIs.",
   "icon": "screenshots/template-icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.v4.media.session.MediaSessionCompat",
     "link": "https://developer.android.com/reference/android/support/v4/media/session/MediaSessionCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.app.PictureInPictureParams",
     "link": "https://developer.android.com/reference/android/app/PictureInPictureParams.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.exoplayer2.SimpleExoPlayer",
     "link": "https://developer.android.com/reference/com/google/android/exoplayer2/SimpleExoPlayer.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.exoplayer2.ui.PlayerView",
     "link": "https://developer.android.com/reference/com/google/android/exoplayer2/ui/PlayerView.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1585741777000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/audio-echo",
   "title": "Audio-Echo",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "audio-echo/",
   "description": "The sample demos how to use OpenSL ES to create a player and recorder in Android Fast Audio Path, and connect them to loopback audio. On most android devices, there is a optimized audio path that is tuned up for low latency purpose. The sample creates player/recorder to work in this highly optimized audio path(sometimes called native audio path, <a href=\"http://stackoverflow.com/questions/14842803/low-latency-audio-playback-on-android?rq=1\">low latency path</a>, or fast audio path). The application is validated against the following configurations: * Android L AndroidOne * Android M Nexus 5, Nexus 9\nThis sample uses the new Android Studio with CMake support, and shows how to use shared stl lib with android studio version 2.2.0, see CMakeLists.txt for details\n<strong><em>Note that OpenSL ES is <a href=\"https://developer.android.com/preview/features#deprecate-opensl\">deprecated from Android 11</a>, developers are recommended to use <a href=\"https://github.com/google/oboe\">Oboe</a> library instead.</em></strong>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/bitmap-plasma",
   "title": "Bitmap Plasma",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "bitmap-plasma/",
   "description": "Bitmap Plasma is an Android sample that uses JNI to render a plasma effect in an Android <a href=\"http://developer.android.com/reference/android/graphics/Bitmap.html\">Bitmap</a> from C code.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/bitmap-plasma/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/endless-tunnel",
   "title": "Endless Tunnel",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a>.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "endless-tunnel/",
   "description": "Endless Tunnel is a sample game that shows how to: - use the Android Studio C++ support - implement a game using Android native glue - implement joystick support, including robust DPAD navigation for non-touch screens\nIt is NOT the goal of this sample to show the best way to write the game logic, load resources, etc. The game itself was intentionally kept rudimentary in order to keep the focus on the Android Studio C++ integration. For example, this game contains textures and geometry hard-coded in code, which works for small demo games like this one, but doesn't scale well to real games.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/endless-tunnel/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/gles3jni",
   "title": "gles3jni",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 1.3+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "gles3jni/",
   "description": "gles3jni is an Android C++ sample that demonstrates how to use OpenGL ES 3.0 from JNI/native code.\nThe OpenGL ES 3.0 rendering path uses a few new features compared to the OpenGL ES 2.0 path: - Instanced rendering and vertex attribute divisor to reduce the number of draw calls and uniform changes. - Vertex array objects to reduce the number of calls required to set up vertex attribute state on each frame. - Explicit assignment of attribute locations, eliminating the need to query assignments.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/gles3jni/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/hello-gl2",
   "title": "Hello GL2",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2 preview+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "hello-gl2/",
   "description": "Hello GL2 is an Android C++ sample that draws a triangle using GLES 2.0 API.\nIt uses JNI to do the rendering in C++ over a <a href=\"http://developer.android.com/reference/android/opengl/GLSurfaceView.html\">GLSurfaceView</a> created from a regular Android Java Activity.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/hello-gl2/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/hello-jni",
   "title": "Hello JNI",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "hello-jni/",
   "description": "Hello JNI is an Android sample that uses JNI to call C code from a Android Java Activity.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support. For how to use Android Studio, refer to <a href=\"https://codelabs.developers.google.com/codelabs/android-studio-cmake/index.html\">Hello-CMake codelab</a>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/hello-jni/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/hello-jniCallback",
   "title": "Hello JNI Callback",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "hello-jniCallback/",
   "description": "This sample is an Aadd-on to Hello JNI sample to demonstrate calling back to Java from C code - create a java class instance from C code - call java class static and non-static member functions\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/hello-jniCallback/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/hello-libs",
   "title": "hello-libs",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 3.0.0 with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "hello-libs/",
   "description": "hello-libs is a sample that shows you how to manage 3rd party C/C++ libraries with Android Studio.",
   "introduction": "<p>This sample uses the <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with external library support. It demos how to:</p>\n<ul> \n <li>include a pre-built static library (gmath) in your app</li> \n <li>include a pre-built shared library (gperf) in your app</li> \n</ul>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/hello-libs/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/hello-oboe",
   "title": "Hello Oboe",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 4.0+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "hello-oboe/",
   "description": "Hello Oboe is an Android sample that uses the <a href=\"https://github.com/google/oboe\">Oboe</a> library to play audio natively. Oboe wraps both AAudio and OpenSLES to help developers play and record audio in performance sensitive contexts across Android versions. The Oboe repository has more information about how to fully take advantage of the Oboe API, as well as more in-depth examples and documentation.\nThis sample uses the Studio Prefab feature to download pre-built Oboe library from <a href=\"https://maven.google.com/web/index.html\">Google Maven</a>, feel free to checkout Prefab steps in - gradle.properties - app/build.gradle - app/src/main/cpp/CMakeLists.txt\nIf you like to build your app with the Oboe library source code, refer to the examples in the Oboe repository.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/native-activity",
   "title": "Native Activity",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "native-activity/",
   "description": "Native Activity is an Android sample that initializes a GLES 2.0 context and reads accelerometer data from C code using <a href=\"http://developer.android.com/reference/android/app/NativeActivity.html\">Native Activity</a>.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/native-activity/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/native-audio",
   "title": "Native Audio",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "native-audio/",
   "description": "Native Audio is an Android sample that plays and records sounds with the C++ OpenSLES API using JNI. The recorder / players created are not in fast audio path.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.\n<strong><em>Note that OpenSL ES is <a href=\"https://developer.android.com/preview/features#deprecate-opensl\">deprecated from Android 11</a>, developers are recommended to use <a href=\"https://github.com/google/oboe\">Oboe</a> library instead.</em></strong>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/native-audio/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/native-plasma",
   "title": "Native Plasma",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "native-plasma/",
   "description": "Native Plasma is an Android sample that renders a plasma effect in a Bitmap from C code using <a href=\"http://developer.android.com/reference/android/app/NativeActivity.html\">Native Activity</a>.\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/native-plasma/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/san-angeles",
   "title": "San Angeles",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "san-angeles/",
   "description": "San Angeles is an Android port of a demo that uses GLES C/API to render a procedural scene.\nSee the original <a href=\"app/src/main/cpp/README.txt\">README</a> for more details about the original GLES port.\nThe sample demos: - <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio with CMake support</a> - <a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits#TOC-ABIs-Splits\">ABI APK split</a>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/san-angeles/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/sensor-graph",
   "title": "Sensor-Graph",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 2.2+ with <a href=\"https://developer.android.com/ndk/\">NDK</a> bundle.</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "sensor-graph/",
   "description": "Sensor graph is a C++ Android sample that read current accelerometer values and draw them using OpenGL.\nIt demonstrate usage of the following Native C++ API: - <a href=\"http://developer.android.com/ndk/reference/group___sensor.html\">Sensors</a> - <a href=\"http://developer.android.com/ndk/reference/group___asset.html\">Assets</a>\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/sensor-graph/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/teapots",
   "title": "Teapots",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 4.0.0 with <a href=\"https://developer.android.com/ndk/\">NDK</a></li> \n <li>Android <a href=\"https://github.com/android/ndk-samples/wiki/Configure-NDK-Path\">NDK 21.1+ installed</a></li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++",
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "teapots/",
   "description": "Teapots is an collection of Android C++ samples that uses a Teapot rendering to demostrate Android NDK platform features: - classic-teapot: Rendering classic teapot mesh using GLES 2.0 API and <a href=\"http://developer.android.com/reference/android/app/NativeActivity.html\">NativeActivity</a>. - more-teapots: Rendering multiple instances of Classic Teapot with GLES 3.0 Instance Rendering - choreographer-30fps: demonstrates multiple frame rate throttoling techniques based on API level using Choreographer API and EGL Android presentation time extension. - textured-teapot: Rendering classic teapot plus textures - image-decoder: Same as textured-teapot, except that texture decoding is done with the ImageDecoder API introduced in Android 11 (Android NDK r21b)\nThis sample uses the new <a href=\"http://tools.android.com/tech-docs/external-c-builds\">Android Studio CMake plugin</a> with C++ support.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/teapots/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/ndk-samples/webp",
   "title": "WEBP",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 3.0.0+ and android-ndk-r16</li> \n</ul>",
   "technologies": [
    "android",
    "ndk"
   ],
   "categories": [
    "ndk"
   ],
   "languages": [
    "c++"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/ndk-samples/",
   "github": "googlesamples/android-ndk",
   "branch": "main",
   "path": "webp/",
   "description": "Webp is an Android sample including a small app to demo usage of webp in <a href=\"http://developer.android.com/reference/android/app/NativeActivity.html\">Native Activity</a><br />view: - rotate decoding 3 webp images and load them into on-screen buffer. Decoding is in its own thread\nThis sample uses the new <a href=\"https://developer.android.com/ndk/guides/cmake.html\">Android Studio CMake plugin</a>.",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/ndk-samples/main/webp/screenshot.png",
     "primary": true
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1624939989000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/permissions-samples/RuntimePermissionsBasic",
   "title": "RuntimePermissionsBasic",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "permissions"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/permissions-samples/",
   "github": "android/permissions",
   "branch": "main",
   "path": "RuntimePermissionsBasic/",
   "description": "This basic sample shows runtime permissions available in the Android M and above. It shows how to use the new runtime permissions API to check and request permissions through the support library.",
   "introduction": "<p>Android M introduced runtime permissions. Applications targeting M and above need to request their permissions at runtime. This sample introduces the basic use of the runtime permissions API through the support library by verifying permissions (ActivityCompat#checkSelfPermission(Context, String)), requesting permissions (ActivityCompat#requestPermissions(Activity, String[], int)) and handling the permission request callback (ActivityCompat.OnRequestPermissionsResultCallback). An application can display additional context and justification for a permission after calling ActivityCompat#shouldShowRequestPermissionRationale#shouldShowRequestPermissionRationale(Activity, String).</p>\n<p>See the &quot;RuntimePermissions&quot; sample for a more complete description and reference implementation.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/permissions-samples/main/RuntimePermissionsBasic/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.Activity",
     "link": "https://developer.android.com/reference/android/app/Activity.html"
    },
    {
     "namespace": "android",
     "name": "android.Manifest.permission",
     "link": "https://developer.android.com/reference/android/Manifest/permission.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1605074791000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/permissions-samples/RuntimePermissionsBasicKotlin",
   "title": "RuntimePermissionsBasicKotlin",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 30</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "permissions"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/permissions-samples/",
   "github": "android/permissions",
   "branch": "main",
   "path": "RuntimePermissionsBasicKotlin/",
   "description": "This basic sample shows runtime permissions available in the Android M and above. It shows how to use the new runtime permissions API to check and request permissions through the support library.",
   "introduction": "<p>Android M introduced runtime permissions. Applications targeting M and above need to request their permissions at runtime. This sample introduces the basic use of the runtime permissions API through the support library by verifying permissions (ActivityCompat#checkSelfPermission(Context, String)), requesting permissions (ActivityCompat#requestPermissions(Activity, String[], int)) and handling the permission request callback (ActivityCompat.OnRequestPermissionsResultCallback). An application can display additional context and justification for a permission after calling ActivityCompat#shouldShowRequestPermissionRationale#shouldShowRequestPermissionRationale(Activity, String).</p>\n<p>See the &quot;RuntimePermissions&quot; sample for a more complete description and reference implementation.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/permissions-samples/main/RuntimePermissionsBasicKotlin/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.Activity",
     "link": "https://developer.android.com/reference/android/app/Activity.html"
    },
    {
     "namespace": "android",
     "name": "android.Manifest.permission",
     "link": "https://developer.android.com/reference/android/Manifest/permission.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1602701160000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/renderscript-samples/BasicRenderScript",
   "title": "BasicRenderScript",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "renderscript"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/renderscript-samples/",
   "github": "android/renderscript",
   "branch": "main",
   "path": "BasicRenderScript/",
   "description": "This sample demonstrates using RenderScript to perform basic image manipulation. Specifically, it allows users to dynamically adjust the saturation for an image using a slider. A custom RenderScript kernel performs the saturation adjustment, running the computation on the device's GPU or other compute hardware as deemed appropriate by the system.",
   "introduction": "<p><a href=\"http://developer.android.com/guide/topics/renderscript/compute.html\">RenderScript</a> is a framework for running computationally intensive tasks at high performance on Android. RenderScript is primarily oriented for use with data-parallel computation, although serial computationally intensive workloads can benefit as well.</p>\n<p>The RenderScript runtime will parallelize work across all processors available on a device, such as multi-core CPUs, GPUs, or DSPs, allowing you to focus on expressing algorithms rather than scheduling work or load balancing. RenderScript is especially useful for applications performing image processing, computational photography, or computer vision.</p>\n<p>This sample demonstrates the fundamentals of writing a RenderScript compute kernel, and using it to perform basic image manipulation. In this case, each pixel is transformed based on a liner interpolation between its original RGB value and it's luminance (black-and-white) value, weighted based on the user's specified saturation target.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/renderscript-samples/main/BasicRenderScript/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "BasicRenderScript/screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.renderscript.RenderScript",
     "link": "https://developer.android.com/reference/android/renderscript/RenderScript.html"
    },
    {
     "namespace": "android",
     "name": "android.renderscript.Allocation",
     "link": "https://developer.android.com/reference/android/renderscript/Allocation.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1597011333000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/renderscript-samples/RenderScriptIntrinsic",
   "title": "RenderScriptIntrinsic",
   "status": "PUBLISHED",
   "level": "EXPERT",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "renderscript"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/renderscript-samples/",
   "github": "android/renderscript",
   "branch": "main",
   "path": "RenderScriptIntrinsic/",
   "description": "RenderScriptIntrinsic sample that demonstrates how to use RenderScript intrinsics. Creates several RenderScript intrinsics and shows a filtering result with various parameters. Also shows how to extends RedioButton with StateListDrawable.",
   "introduction": "<p><a href=\"http://developer.android.com/guide/topics/renderscript/compute.html\">RenderScript</a> is a framework for running computationally intensive tasks at high performance on Android. RenderScript is primarily oriented for use with data-parallel computation, although serial computationally intensive workloads can benefit as well.</p>\n<p>RenderScript <strong>intrinsics</strong> are built-in functions that perform well-defined operations often seen in image processing. Intrinsics provide extremely high-performance implementations of standard functions with a minimal amount of code.</p>\n<p>This sample shows how to access and use the blur, convolve, and matrix intrinsics:</p>\n<p><code>java mScriptBlur = ScriptIntrinsicBlur.create(mRS, Element.U8_4(mRS)); mScriptConvolve = ScriptIntrinsicConvolve5x5.create(mRS, Element.U8_4(mRS)); mScriptMatrix = ScriptIntrinsicColorMatrix.create(mRS, Element.U8_4(mRS)); </code></p>\n<p>RenderScript intrinsics will usually be the fastest possible way for a developer to perform these operations. The Android team works closely with our partners to ensure that the intrinsics perform as fast as possible on their architectures — often far beyond anything that can be achieved in a general-purpose language.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/renderscript-samples/main/RenderScriptIntrinsic/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.renderscript.RenderScript",
     "link": "https://developer.android.com/reference/android/renderscript/RenderScript.html"
    },
    {
     "namespace": "android",
     "name": "android.renderscript.ScriptIntrinsicBlur",
     "link": "https://developer.android.com/reference/android/renderscript/ScriptIntrinsicBlur.html"
    },
    {
     "namespace": "android",
     "name": "android.renderscript.ScriptIntrinsicConvolve5x5",
     "link": "https://developer.android.com/reference/android/renderscript/ScriptIntrinsicConvolve5x5.html"
    },
    {
     "namespace": "android",
     "name": "android.renderscript.ScriptIntrinsicColorMatrix",
     "link": "https://developer.android.com/reference/android/renderscript/ScriptIntrinsicColorMatrix.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1565238013000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/security-samples/BiometricAuthentication",
   "title": "BiometricAuthentication (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 27</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "security"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/security-samples/",
   "github": "android/security",
   "branch": "main",
   "path": "BiometricAuthentication/",
   "description": "A sample that demonstrates to use registered fingerprints to authenticate the user in your app",
   "introduction": "<p>This sample demonstrates how you can use registered fingerprints in your app to authenticate the user before proceeding some actions such as purchasing an item.</p>\n<p>First you need to create a symmetric key in the Android Key Store using <a href=\"https://developer.android.com/reference/javax/crypto/KeyGenerator.html\">KeyGenerator</a> which can be only be used after the user has authenticated with fingerprint and pass a <a href=\"https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.html\">KeyGenParameterSpec</a>.</p>\n<p>By setting <a href=\"https://developer.android.com/reference/android/security/keystore/KeyGenParameterSpec.Builder.html#setUserAuthenticationRequired%28boolean%29\">KeyGenParameterSpec.Builder.setUserAuthenticationRequired</a> to true, you can permit the use of the key only after the user authenticate it including when authenticated with the user's fingerprint.</p>\n<p>Then start listening to a fingerprint on the fingerprint sensor by calling <a href=\"https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html#authenticate%28android.hardware.fingerprint.FingerprintManager.CryptoObject,%20android.os.CancellationSignal,%20int,%20android.hardware.fingerprint.FingerprintManager.AuthenticationCallback,%20android.os.Handler%29\">FingerprintManager.authenticate</a> with a <a href=\"https://developer.android.com/reference/javax/crypto/Cipher.html\">Cipher</a> initialized with the symmetric key created. Or alternatively you can fall back to server-side verified password as an authenticator.</p>\n<p>Once the fingerprint (or password) is verified, the <a href=\"https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.AuthenticationCallback.html#onAuthenticationSucceeded%28android.hardware.fingerprint.FingerprintManager.AuthenticationResult%29\">FingerprintManager.AuthenticationCallback#onAuthenticationSucceeded()</a> callback is called.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricAuthentication/screenshots/1-purchase-screen.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricAuthentication/screenshots/2-fingerprint-dialog.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricAuthentication/screenshots/3-fingerprint-authenticated.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricAuthentication/screenshots/4-new-fingerprint-enrolled.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big-icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.fingerprint.FingerprintManager",
     "link": "https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.fingerprint.FingerprintManager.AuthenticationCallback",
     "link": "https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager/AuthenticationCallback.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.fingerprint.FingerprintManager.CryptoObject",
     "link": "https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager/CryptoObject.html"
    },
    {
     "namespace": "android",
     "name": "android.security.KeyGenParameterSpec",
     "link": "https://developer.android.com/reference/android/security/KeyGenParameterSpec.html"
    },
    {
     "namespace": "android",
     "name": "java.security.KeyStore",
     "link": "https://developer.android.com/reference/java/security/KeyStore.html"
    },
    {
     "namespace": "android",
     "name": "javax.crypto.Cipher",
     "link": "https://developer.android.com/reference/javax/crypto/Cipher.html"
    },
    {
     "namespace": "android",
     "name": "javax.crypto.KeyGenerator",
     "link": "https://developer.android.com/reference/javax/crypto/KeyGenerator.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622677139000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/security-samples/BiometricLoginKotlin",
   "title": "BiometricLogin (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "security"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/security-samples/",
   "github": "android/security",
   "branch": "main",
   "path": "BiometricLoginKotlin/",
   "description": "Sample for the Androidx Biometrics Library",
   "introduction": "<p>This is the canonical sample that demonstrates how to integrate Android Biometrics into your apps. Whether your project is for government, healthcare, financial, enterprise, or general usage, this sample should guide your implementation.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricLoginKotlin/screenshots/authorize_bio.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricLoginKotlin/screenshots/login_landing.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/BiometricLoginKotlin/screenshots/bio_prompt.png",
     "primary": false
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.biometric.BiometricManager",
     "link": "https://developer.android.com/reference/androidx/biometric/BiometricManager.html"
    },
    {
     "namespace": "android",
     "name": "androidx.biometric.BiometricPrompt",
     "link": "https://developer.android.com/reference/androidx/biometric/BiometricPrompt.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628060981000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/security-samples/DirectBoot",
   "title": "DirectBoot",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "security"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/security-samples/",
   "github": "android/security",
   "branch": "main",
   "path": "DirectBoot/",
   "description": "Sample demonstrating how to store data in a device protected storage which is always available while the device is booted both before and after any user credentials(PIN/Pattern/Password) are entered.",
   "introduction": "<p>This sample demonstrates how to store and access data in a device protected storage which is always available while the device is booted. Starting from Android N, the system provides two storage locations for user data:</p>\n<ul> \n <li><p>Credential protected:</p> \n  <ul> \n   <li>The default storage location for all apps, available only after the user has entered their pattern/password</li> \n  </ul></li> \n <li><p>Device protected:</p> \n  <ul> \n   <li>A new storage location which is always available while the device is booted, both before and after any user credentials are entered</li> \n  </ul></li> \n</ul>\n<p>Apps can mark individual components as being direct boot aware which indicates to the system that they can safely run when Credential protected storage is unavailable (an direct boot aware component primarily relies on data stored in the new Device protected storage area, but they may access Credential protected data when unlocked) by adding <code>directBootAware=&quot;true&quot;</code> in the manifest. <code> &lt;activity|provider|receiver|service ... android:directBootAware=”true”&gt; </code></p>\n<p>Components marked as directBoot aware are normal components that will continue to be available after the Credential protected storage becomes available. The storage APIs on the Context supplied to these components will always point to Credential protected storage by default. To access Device protected storage, you can create a secondary Context using this API <code> Context.createDeviceProtectedStorageContext() </code> All of the storage APIs on this returned Context will be redirected to point at Device protected storage.</p>\n<p>You need to be careful what data is stored/moved to a device protected storage because the storage isn't protected by the user's credential (PIN/Pattern/Password) You shouldn't store sensitive data (such as user's emails, auth tokens) in a device protected storage.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/security-samples/main/DirectBoot/screenshots/1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/DirectBoot/screenshots/2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/DirectBoot/screenshots/3.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/security-samples/main/DirectBoot/screenshots/4.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.Context.createDeviceProtectedStorageContext",
     "link": "https://developer.android.com/reference/android/content/Context/createDeviceProtectedStorageContext.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622677139000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/security-samples/Fido",
   "title": "FIDO2 API",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 26</li> \n <li>Android Build Tools v25.0.3</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "security"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/security-samples/",
   "github": "android/security",
   "branch": "main",
   "path": "Fido/",
   "description": "A sample app showing how to register and authenticate with Public Key Credentials using the FIDO2 API.\nFIDO2 API is used for devices running Android N (API level 24) or newer.",
   "introduction": "<p><a href=\"https://developers.google.com/identity/fido/android/native-apps\">The Android FIDO2 API</a> provides a <a href=\"https://fidoalliance.org/\">FIDO Alliance</a> certified implementation of a <a href=\"https://www.w3.org/TR/webauthn/#webauthn-client\">WebAuthn Client</a> for Android. The API supports the use of roaming authenticators such as BLE, NFC, and USB security keys as well as platform authenticators, which allow users to authenticate using their fingerprint or screenlock.</p>\n<p>It is relying party's responsibility to manage registered keys. In the sample app, the keys are managed by <a href=\"https://webauthndemo.appspot.com/\">WebAuthn demo server</a> (<a href=\"https://github.com/google/webauthndemo\">source code</a>), however, in production use cases, the relying party should implement their own storage.</p>\n<p>The FIDO2 API entry point is the <a href=\"https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/Fido2ApiClient\"><code>Fido2ApiClient</code></a>.</p>",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.Fido",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/Fido"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.Fido2ApiClient",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/Fido2ApiClient"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.Fido2PendingIntent",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/Fido2PendingIntent"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.api.common.AuthenticatorAssertionResponse",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/AuthenticatorAssertionResponse"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.api.common.AuthenticatorAttestationResponse",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/AuthenticatorAttestationResponse"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.api.common.AuthenticatorErrorResponse",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/AuthenticatorErrorResponse"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialCreationOptions",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/PublicKeyCredentialCreationOptions"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.fido.fido2.api.common.PublicKeyCredentialRequestOptions",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/fido/fido2/api/common/PublicKeyCredentialRequestOptions"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622677139000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/security-samples/FileLocker",
   "title": "File Locker",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29</li> \n <li>Jetpack Security Library</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "security"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/security-samples/",
   "github": "android/security-samples",
   "branch": "main",
   "path": "FileLocker/",
   "description": "A sample that demonstrates how to use the Jetpack Security library to encrypt and decrypt files by implementing a simple note taking app.\n<img src=\"screenshots/notes-list.png\" height=\"400\" alt=\"Screenshot showing a list of notes. The notes say 'Secret Note' and 'Encrypted Todo List'.\" />",
   "introduction": "<p>This sample shows how to implement based file and shared preferences encryption using the <a href=\"https://developer.android.com/topic/security/data.md\">Jetpack security library</a>.</p>\n<p>The sample shows how to use <a href=\"https://developer.android.com/reference/androidx/security/crypto/EncryptedFile\"><code>EncryptedFile</code></a> to securely store notes, as well as using <a href=\"https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences\"><code>EncryptedSharedPreferences</code></a> to store a &quot;master password&quot; that must be entered before notes can be viewed or edited.</p>",
   "icon": "screenshots/notes-list.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.security.crypto.EncryptedFile",
     "link": "https://developer.android.com/reference/androidx/security/crypto/EncryptedFile.html"
    },
    {
     "namespace": "android",
     "name": "androidx.security.crypto.EncryptedSharedPreferences",
     "link": "https://developer.android.com/reference/androidx/security/crypto/EncryptedSharedPreferences.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622678354000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/sensors-samples/BatchStepSensor",
   "title": "BatchStepSensor",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "sensors"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/sensors-samples/",
   "github": "android/sensors",
   "branch": "main",
   "path": "BatchStepSensor/",
   "description": "Sample demonstrating how to set up SensorEventListeners for step detectors and step counters.",
   "introduction": "<p>This sample demonstrates the use of the two step <a href=\"https://developer.android.com/reference/android/hardware/Sensor.html\">sensors</a> (step detector and counter) and sensor batching.</p>\n<p>It shows how to register a <a href=\"https://developer.android.com/reference/android/hardware/SensorEventListener.html\">SensorEventListener</a> with and without batching and shows how these events are received.</p>\n<p>The Step Detector sensor fires an event when a step is detected, while the step counter returns the total number of steps since a listener was first registered for this sensor.</p>\n<p>Both sensors only count steps while a listener is registered. This sample only covers the basic case, where a listener is only registered while the app is running. Likewise, batched sensors can be used in the background (when the CPU is suspended), which requires manually flushing the <a href=\"https://developer.android.com/reference/android/hardware/SensorEvent.html\">sensor event</a> queue before it overflows, which is not covered in this sample.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot3.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot4.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot5.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/sensors-samples/main/BatchStepSensor/screenshots/screenshot6.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.hardware.Sensor",
     "link": "https://developer.android.com/reference/android/hardware/Sensor.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.SensorEvent",
     "link": "https://developer.android.com/reference/android/hardware/SensorEvent.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.SensorEventListener",
     "link": "https://developer.android.com/reference/android/hardware/SensorEventListener.html"
    },
    {
     "namespace": "android",
     "name": "android.hardware.SensorManager",
     "link": "https://developer.android.com/reference/android/hardware/SensorManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1564348871000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/ActionOpenDocument",
   "title": "ACTION_OPEN_DOCUMENT",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Device/Emulator API 21+</li> \n</ul>",
   "technologies": [
    "android",
    "storage access framework"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "ActionOpenDocument/",
   "description": "<img src=\"screenshots/icon-web.png\" height=\"256\" alt=\"App Icon\" />\nThis sample demonstrates how to display PDF document on screen using the PdfRenderer introduced in <a href=\"https://www.android.com/versions/lollipop-5-0/\">Android 5.0 Lollipop</a>.",
   "introduction": "<p>This sample demonstrates how to use the <a href=\"https://developer.android.com/guide/topics/providers/document-provider\">Storage Access Framework</a> and <a href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\"><code>ACTION_OPEN_DOCUMENT</code></a> to open PDF documents without relying on <code>READ_EXTERNAL_STORAGE</code> permission.</p>\n<p>The app also demonstrates how you can now render PDF document pages into bitmap images for printing by using the <a href=\"https://developer.android.com/guide/topics/providers/document-provider\">PdfRenderer</a> class introduced in Android Lollipop.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/ActionOpenDocument/screenshots/start.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/storage-samples/main/ActionOpenDocument/screenshots/main.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ContentResolver",
     "link": "https://developer.android.com/reference/android/content/ContentResolver.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.DocumentsContract",
     "link": "https://developer.android.com/reference/android/provider/DocumentsContract.html"
    },
    {
     "namespace": "android",
     "name": "android.graphics.pdf.PdfRenderer",
     "link": "https://developer.android.com/reference/android/graphics/pdf/PdfRenderer.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1593091449000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/ActionOpenDocumentTree",
   "title": "ACTION_OPEN_DOCUMENT_TREE",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Studio 3.3+</li> \n</ul>",
   "technologies": [
    "android",
    "storage access framework"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "ActionOpenDocumentTree/",
   "description": "A proof of concept file manager utilizing the <a href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE\">ACTION_OPEN_DOCUMENT_TREE</a> intent introduced with <a href=\"https://www.android.com/versions/lollipop-5-0/\">Android 5.0</a>, API level 21.",
   "introduction": "<p>The <a href=\"https://developer.android.com/guide/topics/providers/document-provider\">Storage Access Framework</a> was introduced in Android 4.4, API level 19, with the new Intents <a href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT\">ACTION_OPEN_DOCUMENT</a> and <a href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_CREATE_DOCUMENT\">ACTION_CREATE_DOCUMENT</a>. This allowed an app to open or save files in a shared directory without additional permissions.</p>\n<p>These APIs were then extended in Android 5.0 with the intent <a href=\"https://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT_TREE\">ACTION_OPEN_DOCUMENT_TREE</a>. This intent allowed the user to choose and grant access to an entire directory tree, including the entire SD card which is ideal for folder based media players or file managers apps.</p>\n<p>This sample provides a minimal proof of concept file manager called &quot;ktFiles&quot; which, after granted access to a directory, allows the user to browse and open any files found within the directories by utilizing common Android intents.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/ActionOpenDocumentTree/screenshots/browse.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ContentResolver",
     "link": "https://developer.android.com/reference/android/content/ContentResolver.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.DocumentsContract",
     "link": "https://developer.android.com/reference/android/provider/DocumentsContract.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1618783278000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/ContentProviderPaging",
   "title": "ContentProviderPaging",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "ContentProviderPaging/",
   "description": "This sample demonstrates how to use the ContentProvider with paging support introduced in Android O. The ContentProvider now accepts additional arguments for the offset and the limit in the query method to support paging instead of fetching all the data in a single query method call.",
   "introduction": "<p><a href=\"https://developer.android.com/reference/android/content/ContentProvider.html\">ContentProvider</a> and <a href=\"https://developer.android.com/reference/android/provider/DocumentsProvider.html\">DocumentsProvider</a> now supports paging instead of fetching the all data at once.</p>\n<p>Starting from Android O, ContentProvider#query(Uri, String[], Bundle, CancellationSignal) and DocumentsProvider#query(Uri, String[], Bundle, CancellationSignal) methods are introduced. The Bundle accepts the keys for ContentResolver.QUERY_ARG_OFFSET as an starting offset and ContentResolver.QUERY_ARG_LIMIT as the number of items included in the returned Cursor object.</p>\n<p>Similarly, the returned Cursor object now has a Bundle object obtained by Cursor#getExtras(). The Bundle is able to include data such as the total size of the underlying data set.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/ContentProviderPaging/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ContentProvider",
     "link": "https://developer.android.com/reference/android/content/ContentProvider.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.DocumentsProvider",
     "link": "https://developer.android.com/reference/android/provider/DocumentsProvider.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568140920000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/ContentProviderPagingKotlin",
   "title": "ContentProviderPaging (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 25</li> \n <li>Android Build Tools v25.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "ContentProviderPagingKotlin/",
   "description": "This sample demonstrates how to use the ContentProvider with paging support introduced in Android O. The ContentProvider now accepts additional arguments for the offset and the limit in the query method to support paging instead of fetching all the data in a single query method call.",
   "introduction": "<p><a href=\"https://developer.android.com/reference/android/content/ContentProvider.html\">ContentProvider</a> and <a href=\"https://developer.android.com/reference/android/provider/DocumentsProvider.html\">DocumentsProvider</a> now supports paging instead of fetching the all data at once.</p>\n<p>Starting from Android O, ContentProvider#query(Uri, String[], Bundle, CancellationSignal) and DocumentsProvider#query(Uri, String[], Bundle, CancellationSignal) methods are introduced. The Bundle accepts the keys for ContentResolver.QUERY_ARG_OFFSET as an starting offset and ContentResolver.QUERY_ARG_LIMIT as the number of items included in the returned Cursor object.</p>\n<p>Similarly, the returned Cursor object now has a Bundle object obtained by Cursor#getExtras(). The Bundle is able to include data such as the total size of the underlying data set.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/ContentProviderPagingKotlin/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ContentProvider",
     "link": "https://developer.android.com/reference/android/content/ContentProvider.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.DocumentsProvider",
     "link": "https://developer.android.com/reference/android/provider/DocumentsProvider.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1572872449000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/MediaStore",
   "title": "Media Store",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29</li> \n <li>Android Device/Emulator API 16+</li> \n</ul>",
   "technologies": [
    "android",
    "media store"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "MediaStore/",
   "description": "<img src=\"screenshots/icon-web.png\" height=\"256\" alt=\"App Icon\" />\nThis sample demonstrates how to use Android's <a href=\"https://developer.android.com/reference/android/provider/MediaStore\">MediaStore</a> to locate and display the users images in a RecyclerView.",
   "introduction": "<p>This sample demonstrates how to use the <a href=\"https://developer.android.com/reference/android/provider/MediaStore\">Media Store</a> to display items in the <a href=\"https://developer.android.com/reference/android/provider/MediaStore.Images\">Images</a> collection. This requires <a href=\"https://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE\"><code>READ_EXTERNAL_STORAGE</code></a> permission since it accesses files that other apps created and contributed to the Media Store. </p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/MediaStore/screenshots/app.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ContentResolver",
     "link": "https://developer.android.com/reference/android/content/ContentResolver.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.MediaStore",
     "link": "https://developer.android.com/reference/android/provider/MediaStore.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1622679973000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/SharingShortcuts",
   "title": "SharingShortcuts",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "SharingShortcuts/",
   "description": "Sample demonstrating how to show some options directly in the list of share intent candidates.",
   "introduction": "<p>Direct Share is a feature that allows apps to show their internal options directly in the system Intent chooser dialog. This sample is a dummy messaging app, and just like any other messaging apps, it receives intents for sharing a plain text. When a user shares some text from some other app, this sample app will be listed as an option. Using the Direct Share feature, this app also shows some of contacts directly in the chooser dialog.</p>\n<p>Direct Share was <a href=\"https://developer.android.com/about/versions/marshmallow/android-6.0#direct-share\">first introduced</a> in Android M where you had to implement a service to provide direct share targets on demand. The way to do that changed in Android Q, you need to provide your direct share targets in advance. First, you have to declare share-target elements in the same application's resource file than <a href=\"https://developer.android.com/guide/topics/ui/shortcuts/creating-shortcuts\">static shortcuts</a>. Then, you need to publish dynamic shortcuts with the same category you declared in the share-target with the <a href=\"https://developer.android.com/reference/androidx/core/content/pm/ShortcutManagerCompat.html\">ShortcutManager API</a>. You will need to manually update the list of shortcuts every time you consider it appropriate. The API offers methods to update, remove or add shortcuts. You can use the <a href=\"https://developer.android.com/reference/androidx/core/content/pm/ShortcutInfoCompat.Builder.html\">ShortcutInfoCompat.Builder</a> to customize your shortcut. If you don't want to block the UI thread doing these operations, interactions with the ShortcutManager can also happen on a background thread.</p>\n<p>There are three ways the app is sending/receiving intents: - Dynamic Share: The user selected the app in the sharesheet to receive the text. After this, the user will have to select the contact to share the text with. In our case, the app receives an intent of type Intent.ACTION_SEND. - Direct Share: The user selected a person of your app in the sharesheet to share the text with. The received intent of type Intent.ACTION_SEND will contain a String EXTRA_SHORTCUT_ID that will have the id of the shortcut that was selected. After this, the app is ready to send the text. - Launcher shortcut: When the user taps on a launcher shortcut, the intent that was added to the shortcut will get fired. In our case, it triggers an intent of type Intent.ACTION_DEFAULT.</p>\n<p>To make Direct Share backwards compatible with older Android versions, you need to add the AndroidX sharetarget library and in your AndroidManifest.xml, add a meta-data tag in your Activity that receives the Intent. Specify android:name as android.service.chooser.chooser_target_service and android:value as androidx.sharetarget.ChooserTargetServiceCompat.</p>\n<p>The way to share text has also changed. Before, you could specify a title in the <a href=\"https://developer.android.com/reference/android/content/Intent.html#createChooser(android.content.Intent,%20java.lang.CharSequence)\">Intent.createChooser()</a> method itself. That is deprecated and unused in Android Q. You can achieve the same behavior by adding an Intent.EXTRA_TITLE extra to the intent. Similarly, if you want a preview thumbnail to appear, you can create a content URI and set a ClipData object in the intent. You can see how to do that in our example, open the MainActivity.java file for more details.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/SharingShortcuts/screenshots/1-main.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/storage-samples/main/SharingShortcuts/screenshots/2-intent.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/storage-samples/main/SharingShortcuts/screenshots/3-message.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/storage-samples/main/SharingShortcuts/screenshots/4-static_shortcuts.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.core.app.Person",
     "link": "https://developer.android.com/reference/androidx/core/app/Person.html"
    },
    {
     "namespace": "android",
     "name": "androidx.core.content.pm.ShortcutInfoCompat",
     "link": "https://developer.android.com/reference/androidx/core/content/pm/ShortcutInfoCompat.html"
    },
    {
     "namespace": "android",
     "name": "androidx.core.content.pm.ShortcutManagerCompat",
     "link": "https://developer.android.com/reference/androidx/core/content/pm/ShortcutManagerCompat.html"
    },
    {
     "namespace": "android",
     "name": "androidx.core.graphics.drawable.IconCompat",
     "link": "https://developer.android.com/reference/androidx/core/graphics/drawable/IconCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1614882722000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/StorageClient",
   "title": "StorageClient",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "StorageClient/",
   "description": "Using the OPEN_DOCUMENT intent, a client app can access a list of Document Providers on the device, and choose a file from any of them.",
   "introduction": "<p>This sample aims to help you understand the OPEN_DOCUMENT intent, which allows a client application to access a list of Document Providers on the devices and choose a file from any of them.</p>\n<p>This sample first fires an intent to spin up the &quot;file chooser&quot; UI and select an image. Then, given the content:// URI of the selected image, it shows it on the screen using a DialogFragment. It also grabs metadata for the document specified by URI and logs that to the screen.</p>\n<p>To demonstrate this, click the &quot;Show me&quot; button to open up the Storage Access Framework interface, and choose an image on your device. It will be displayed in this app.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/StorageClient/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.Intent",
     "link": "https://developer.android.com/reference/android/content/Intent.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1572372974000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/storage-samples/StorageProvider",
   "title": "StorageProvider",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "storage"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/storage-samples/",
   "github": "android/storage",
   "branch": "main",
   "path": "StorageProvider/",
   "description": "This sample shows how to implement a simple documents provider using the storage access framework available in Android 4.4.",
   "introduction": "<p>This sample uses the <a href=\"https://developer.android.com/guide/topics/providers/document-provider.html\">StorageAccessFramework</a> introduced in Android 4.4 to implement a <a href=\"https://developer.android.com/reference/android/provider/DocumentsProvider.html\">DocumentsProvider</a>.</p>\n<p>See <a href=\"https://developer.android.com/guide/topics/providers/document-provider.html#custom\">Writing A Custom Document Provider guide</a> for all the details on how to do this.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/storage-samples/main/StorageProvider/screenshots/1-logged-out.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/storage-samples/main/StorageProvider/screenshots/2-logged-in.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.provider.DocumentsProvider",
     "link": "https://developer.android.com/reference/android/provider/DocumentsProvider.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1574898978000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/sunflower",
   "title": "Sunflower",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "getting started",
    "jetpack"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/sunflower/",
   "github": "android/sunflower",
   "branch": "main",
   "path": "",
   "description": "A gardening app illustrating Android development best practices with Android Jetpack.\nAndroid Sunflower is currently under heavy development. Note that some changes (such as database schema modifications) are not backwards compatible and may cause the app to crash. In this case, please uninstall and re-install the app.",
   "introduction": "<p>Android Jetpack is a set of components, tools and guidance to make great Android apps. They bring together the existing Support Library and Architecture Components and arrange them into four categories:</p>\n<p><img src=\"screenshots/jetpack_donut.png\" alt=\"Android Jetpack\" title=\"Android Jetpack Components\" \"=\"\" /></p>\n<p>Android Sunflower demonstrates utilizing these components to create a simple gardening app. Read the <a href=\"https://medium.com/androiddevelopers/introducing-android-sunflower-e421b43fe0c2\">Introducing Android Sunflower</a> article for a walkthrough of the app.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/sunflower/main/screenshots/phone_plant_list.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/sunflower/main/screenshots/phone_plant_detail.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/sunflower/main/screenshots/phone_my_garden.png",
     "primary": false
    }
   ],
   "icon": "screenshots/ic_launcher-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.constraint.ConstraintLayout",
     "link": "https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623800082000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/testing-samples/unit/BasicSample",
   "title": "Basic sample for writing unit tests that mocks the framework",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "getting started"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile",
    "testing"
   ],
   "cloneUrl": "https://github.com/android/testing-samples/",
   "github": "android-testing",
   "branch": "main",
   "path": "unit/BasicSample/",
   "description": "<em>If you are new to unit testing on Android, try this sample first.</em>\nThis project uses the Gradle build system and the Android gradle plugin support for unit testing. You can either benefit from IDEs integration such as Android studio or run the tests on the command line.\nUnit tests run on a local JVM on your development machine. The Android Gradle plugin will compile your app's source code and execute it using gradle test task. Tests are executed against a modified version of android.jar where all final modifiers have been stripped off. This lets you use popular mocking libraries, like Mockito.\nFor more information see http://tools.android.com/tech-docs/unit-testing-support",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1625073164000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/testing-samples/unit/BasicSample-kotlinApp",
   "title": "Basic sample (in Kotlin) for writing unit tests that mocks the framework",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "getting started"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile",
    "testing"
   ],
   "cloneUrl": "https://github.com/android/testing-samples/",
   "github": "android-testing",
   "branch": "main",
   "path": "unit/BasicSample-kotlinApp/",
   "description": "<em>If you are new to unit testing on Android, try this sample first.</em>\nThis project uses the Gradle build system and the Android gradle plugin support for unit testing. You can either benefit from IDEs integration such as Android studio or run the tests on the command line.\nUnit tests run on a local JVM on your development machine. The Android Gradle plugin will compile your app's source code and execute it using gradle test task. Tests are executed against a modified version of android.jar where all final modifiers have been stripped off. This lets you use popular mocking libraries, like Mockito.\nFor more information see http://tools.android.com/tech-docs/unit-testing-support",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1625073164000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/AdvancedImmersiveMode",
   "title": "AdvancedImmersiveMode",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "AdvancedImmersiveMode/",
   "description": "Immersive Mode, added in Android 4.4, improves the &quot;hide full screen&quot; and &quot;hide nav bar&quot; modes by letting users swipe the bars in and out. This sample lets the user experiment with immersive mode by seeing how it interacts with some of the other UI flags related to full-screen apps.",
   "introduction": "<p>Android 4.4 (API Level 19) introduces a new <code>SYSTEM_UI_FLAG_IMMERSIVE</code> flag for <a href=\"http://developer.android.com/reference/android/view/View.html#setSystemUiVisibility(int)\">setSystemUiVisibility()</a> that lets your app go truly &quot;full screen.&quot; This flag, when combined with the <code>SYSTEM_UI_FLAG_HIDE_NAVIGATION</code> and <code>SYSTEM_UI_FLAG_FULLSCREEN</code> flags, hides the navigation and status bars and lets your app capture all touch events on the screen.</p>\n<p>When immersive full-screen mode is enabled, your activity continues to receive all touch events. The user can reveal the system bars with an inward swipe along the region where the system bars normally appear.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/AdvancedImmersiveMode/screenshots/immersion.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/AdvancedImmersiveMode/screenshots/leanback.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.Window",
     "link": "https://developer.android.com/reference/android/view/Window.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/AppShortcuts",
   "title": "AppShortcuts",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "AppShortcuts/",
   "description": "This sample demonstrates how to use the Launcher Shortcuts API introduced in Android 7.1 (API 25). This API allows an application to define a set of Intents which are displayed as when a user long-presses on the app's launcher icon. Examples are given for registering both links both statically in XML, as well as dynamically at runtime.",
   "introduction": "<p>You can use the shortcuts feature in Android 7.1 (API 25) to bring users from the launcher directly to key actions within your app. Users simply long-press your app's launcher icon to reveal the app's shortcuts, then tap on a shortcut to jump to the associated action. These shortcuts are a great way to engage users, and they let you surface the functionality of your app even before users launch your app.</p>\n<p>Each shortcut references an intent, each of which launches a specific action or task, and you can create a shortcut for any action that you can express as an intent. For example, you can create intents for sending a new text message, making a reservation, playing a video, continuing a game, loading a map location, and much more.</p>\n<p>You can create shortcuts for your app statically by adding them to a resource file in the APK, or you can add them dynamically at runtime. Static shortcuts are ideal for common actions, and dynamic shortcuts let you highlight actions based on users' preferences, behavior, location, and so on. This sample demonstrates both types of shortcuts.</p>\n<p>You can offer up to five shortcuts in each of your apps.</p>\n<p>After your app adds shortcuts, they're available on any launcher that supports them, such as the Pixel launcher (the default launcher on Pixel devices), the Now launcher (the default launcher on Nexus devices), and other launchers that provide support.</p>\n<p>For more information on creating shortcuts, see the <a href=\"https://developer.android.com/preview/shortcuts.html\">Shortcuts to App Actions</a> developer guide.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/AppShortcuts/screenshots/screenshot1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.pm.ShortcutManager",
     "link": "https://developer.android.com/reference/android/content/pm/ShortcutManager.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/BasicImmersiveMode",
   "title": "BasicImmersiveMode",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "BasicImmersiveMode/",
   "description": "Sample demonstrating the use of immersive mode to hide the system and navigation bars for full screen applications.",
   "introduction": "<p>'Immersive Mode' is a new UI mode which improves 'hide full screen' and 'hide nav bar' modes, by letting users swipe the bars in and out.</p>\n<p>This sample demonstrates how to enable and disable immersive mode programmatically.</p>\n<p>Immersive mode was introduced in Android 4.4 (Api Level 19). It is toggled using the SYSTEM_UI_FLAG_IMMERSIVE system ui flag. When combined with the SYSTEM_UI_FLAG_HIDE_NAVIGATION and SYSTEM_UI_FLAG_FULLSCREEN flags, hides the navigation and status bars and lets your app capture all touch events on the screen.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/BasicImmersiveMode/screenshots/1-activity.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/BasicImmersiveMode/screenshots/2-immersive.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.View",
     "link": "https://developer.android.com/reference/android/view/View.html"
    },
    {
     "namespace": "android",
     "name": "android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY",
     "link": "https://developer.android.com/reference/android/view/View/SYSTEM_UI_FLAG_IMMERSIVE_STICKY.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/ClippingBasic",
   "title": "ClippingBasic",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "ClippingBasic/",
   "description": "A basic app showing how to clip on a View using <a href=\"https://developer.android.com/reference/android/view/ViewOutlineProvider.html\">ViewOutlineProvider</a> interface, by which a View builds its outline, used for shadowing and clipping.",
   "introduction": "<p>The <a href=\"https://developer.android.com/reference/android/view/ViewOutlineProvider.html\">ViewOutlineProvider</a> interface offers you a method to populate the outline of a View. You need to implement a getOutline(android.view.View, android.graphics.Outline) method to clip a View in a specific shape.</p>\n<p>This example clips the outline of a View as a rounded rectangle by defining a class that implements ViewOutlineProvider by following code:</p>\n<p><code>java private class ClipOutlineProvider extends ViewOutlineProvider { @Override public void getOutline(View view, Outline outline) { final int margin = Math.min(view.getWidth(), view.getHeight()) / 10; outline.setRoundRect(margin, margin, view.getWidth() - margin, view.getHeight() - margin, margin / 2); } } </code></p>\n<p>To clip a View by the defined outline, setting a OutlineProvider to a View to be clipped is needed like following:</p>\n<p><code>java final View clippedView = view.findViewById(R.id.frame); clippedView.setOutlineProvider(mOutlineProvider); </code></p>\n<p>You can toggle if the View is clipped by calling <a href=\"https://developer.android.com/reference/android/view/View.html#setClipToOutline(boolean)\">setClipToOutline(boolean)</a> like following code:</p>\n<p><code>java clippedView.setClipToOutline(true); // Setting false disable clipping </code></p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/ClippingBasic/screenshots/screenshot-1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/ClippingBasic/screenshots/screenshot-2.png",
     "primary": false
    }
   ],
   "icon": "screenshots/web-icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.ViewOutlineProvider",
     "link": "https://developer.android.com/reference/android/view/ViewOutlineProvider.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/DarkTheme",
   "title": "DarkTheme",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface-samples",
   "branch": "main",
   "path": "DarkTheme/",
   "description": "Sample demonstrating the different ways to support Dark Mode on Android. Uses the Material Design Components Library.",
   "introduction": "<p>Android Q has explicit user support for Dark Mode, allowing users to choose whether the device theme is dark or not. There are multiple ways you can allow Dark Mode in your app:</p>\n<h3>Night mode in AppCompat and Material Components</h3>\n<p>AppCompat has had &quot;night mode&quot; APIs for a number of years now. It allows developers to implement dark mode in their apps using the -night resource qualifier. The <a href=\"https://material.io/develop/android/docs/getting-started/\">Material Design Components library</a> builds upon AppCompat and exposes its own DayNight themes.</p>\n<p>The DayNight theme in the AndroidX Material Components library provides Dark Theme backwards compatibility down to API 14. The theme we use in the app (specified in <code>AndroidManifest.xml#L23</code>) extends from DayNight (<code>values/styles.xml#L16</code>).</p>\n<p>Use theme-defined colours when defining colours for your drawables. For example, we use <code>?attr/colorOnBackground</code> for the generic text color of the app (<code>values/styles.xml#35</code>).</p>\n<p>When it's not possible to use theme-defined colours, you can use the -night qualifier to extract hard-coded values and switch them out when the configuration changes to night mode. For example, we use a different primary colour in dark mode. Check <code>values-night/colors.xml</code> for more details. You can also specify custom drawables creating a drawable-night folder.</p>\n<p>Tell AppCompat what mode to use by calling <a href=\"https://developer.android.com/reference/android/support/v7/app/AppCompatDelegate#setdefaultnightmode\"><code>AppCompatDelegate.setDefaultNightMode()</code></a> or <code>getDelegate().setLocalNightMode()</code>. It can take different values: - MODE_NIGHT_YES. Always use the dark theme. - MODE_NIGHT_NO. Always use the light theme (Smart Dark can override it). - MODE_NIGHT_FOLLOW_SYSTEM. Follows the current system setting - MODE_NIGHT_AUTO_BATTERY. Dark when battery saver is enabled, light otherwise.</p>\n<p>In the code sample, you can find the code related to this in the <code>ThemeHelper</code> class.</p>\n<h3>Smart Dark</h3>\n<p>Smart Dark is a new feature in Android Q which can automatically theme a light app to dark by dynamically re-coloring the app being drawn at runtime. It has no direct developer APIs. It is made for apps which do not have explicit Dark Theme support yet.</p>\n<p>Smart Dark applies to any theme whose value of <code>android:isLightTheme=true</code>. This is set on all of the <code>Theme.*.Light.*</code> variants, including those from AppCompat. You can opt-in and opt-out at both a theme and view level. Opt-in by setting <code>android:forceDarkAllowed=&quot;true&quot;</code> in the view or theme. Alternatively, you can enable/disable it in the code by calling <code>View#setForceDarkAllowed(boolean)</code>.</p>\n<p>This feature is implemented in the <code>PreferencesFragment</code>. As you can see in the <code>layout/fragment_preferences.xml</code> file, all colours are hard-coded to be light-theme suitable. To make it use Smart Dark, the parent view sets <code>android:forceDarkAllowed=&quot;true&quot;</code> (you can see it in <code>layout/fragment_preferences.xml#L19</code>). In this case, when Smart Dark is active, this screen will be automatically themed to be dark-mode friendly. The system will change most of the colours to make that happen.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/light_1_welcome.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/light_2_preferences.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/light_3_settings.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/light_4_theme_options.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/dark_1_welcome.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/smart_dark_2_preferences.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/dark_3_settings.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DarkTheme/screenshots/dark_4_theme_options.png",
     "primary": false
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/DocumentCentricApps",
   "title": "DocumentCentricRecents",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "DocumentCentricApps/",
   "description": "Sample demonstrating the basic usage of the new 'Document Centric Apps' API. It let's you create new documents in the system overview menu and persists its state through reboots.",
   "introduction": "<p>This sample shows the basic usage of the new Document-Centric Apps API. The new API modifies the meaning of the Intent#FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET flag, which is now deprecated. In versions before L it serves to define a boundary between the main task and a subtask. The subtask holds a different thumbnail and all activities in it are finished when the task is reset. In L this flag causes a full break with the task that launched it. As such it has been renamed to Intent#FLAG_ACTIVITY_NEW_DOCUMENT.</p>\n<p>This sample mainly uses Intent flags in code. But Activities can also specify in their manifests that they shall always be launched into a new task in the above manner using the new activity attribute documentLaunchMode which may take on one of three values, “intoExisting” equivalent to NEW_DOCUMENT, “always” equivalent to NEW_DOCUMENT | MULTIPLE_TASK, “none” the default, and “never” which will negate the effect of any attempt to launch the activity with NEW_DOCUMENT.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DocumentCentricApps/screenshots/1-activity.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DocumentCentricApps/screenshots/2-overview.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.Activity",
     "link": "https://developer.android.com/reference/android/app/Activity.html"
    },
    {
     "namespace": "android",
     "name": "android.content.Intent.FLAG_ACTIVITY_NEW_DOCUMENT",
     "link": "https://developer.android.com/reference/android/content/Intent/FLAG_ACTIVITY_NEW_DOCUMENT.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/DownloadableFonts",
   "title": "DownloadableFonts",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "DownloadableFonts/",
   "description": "This sample demonstrates how to use the Downloadable Fonts feature introduced in Android O. Downloadable Fonts is a feature that allows apps to request a certain font from a provider instead of bundling it or downloading it themselves. This means, there is no need to bundle the font as an asset.",
   "introduction": "<p>There are two ways of requesting a font to download. To request a font to download from Java code, you need to create a <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontRequest.html\">FontRequest</a> class first like this: <code>java FontRequest request = new FontRequest( &quot;com.google.android.gms.fonts&quot;, // ProviderAuthority &quot;com.google.android.gms&quot;, // ProviderPackage query, // Query R.array.com_google_android_gms_fonts_certs); // Certificates </code> The parameters <code>ProviderAuthority</code>, <code>ProviderPackage</code> are given by a font provider, in the case above uses Google Play Services as a font provider. The third parameter is a query string about the requested font. The syntax of the query is defined by the font provider.</p>\n<p>Then pass the request instance to the <code>requestFont</code> method in the <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontsContractCompat.html\">FontsContractCompat</a>. <code>java FontsContractCompat.requestFont(context, request, callback, handler); </code> The downloaded font or an error code if the request failed will be passed to the callback. The example above assumes you are using the classes from the support library. There are corresponding classes in the framework, but the feature is available back to API level 14 if you use the support library.</p>\n<p>You can declare a downloaded font in an XML file and let the system download it for you and use it in layouts. <code>xml &lt;font-family xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; app:fontProviderAuthority=&quot;com.google.android.gms.fonts&quot; app:fontProviderPackage=&quot;com.google.android.gms&quot; app:fontProviderQuery=&quot;Lobster Two&quot; app:fontProviderCerts=&quot;@array/com_google_android_gms_fonts_certs&quot;&gt; &lt;/font-family&gt; </code> By defining the requested font in an XML file and putting the <code>preloaded_fonts</code> array and the meta-data tag in the AndroidManifest, you can avoid the delay until the font is downloaded by the first attempt. <code>xml &lt;resources&gt; &lt;array name=&quot;preloaded_fonts&quot; translatable=&quot;false&quot;&gt; &lt;item&gt;@font/lobster_two&lt;/item&gt; &lt;/array&gt; &lt;/resources&gt; </code></p>\n<p><code>xml &lt;application &gt; ... &lt;meta-data android:name=&quot;preloaded_fonts&quot; android:resource=&quot;@array/preloaded_fonts&quot; /&gt; ... &lt;/application&gt; </code></p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DownloadableFonts/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.FontsContractCompat",
     "link": "https://developer.android.com/reference/android/provider/FontsContractCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontsContractCompat",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontsContractCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/DownloadableFontsKotlin",
   "title": "DownloadableFonts (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 25</li> \n <li>Android Build Tools v25.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface-samples",
   "branch": "main",
   "path": "DownloadableFontsKotlin/",
   "description": "This sample demonstrates how to use the Downloadable Fonts feature introduced in Android O. Downloadable Fonts is a feature that allows apps to request a certain font from a provider instead of bundling it or downloading it themselves. This means, there is no need to bundle the font as an asset.",
   "introduction": "<p>There are two ways of requesting a font to download. To request a font to download from Java code, you need to create a <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontRequest.html\">FontRequest</a> class first like this: <code>java FontRequest request = new FontRequest( &quot;com.google.android.gms.fonts&quot;, // ProviderAuthority &quot;com.google.android.gms&quot;, // ProviderPackage query, // Query R.array.com_google_android_gms_fonts_certs); // Certificates </code> The parameters <code>ProviderAuthority</code>, <code>ProviderPackage</code> are given by a font provider, in the case above uses Google Play Services as a font provider. The third parameter is a query string about the requested font. The syntax of the query is defined by the font provider.</p>\n<p>Then pass the request instance to the <code>requestFont</code> method in the <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontsContractCompat.html\">FontsContractCompat</a>. <code>java FontsContractCompat.requestFont(context, request, callback, handler); </code> The downloaded font or an error code if the request failed will be passed to the callback. The example above assumes you are using the classes from the support library. There are corresponding classes in the framework, but the feature is available back to API level 14 if you use the support library.</p>\n<p>You can declare a downloaded font in an XML file and let the system download it for you and use it in layouts. <code>xml &lt;font-family xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot; app:fontProviderAuthority=&quot;com.google.android.gms.fonts&quot; app:fontProviderPackage=&quot;com.google.android.gms&quot; app:fontProviderQuery=&quot;Lobster Two&quot; app:fontProviderCerts=&quot;@array/com_google_android_gms_fonts_certs&quot;&gt; &lt;/font-family&gt; </code> By defining the requested font in an XML file and putting the <code>preloaded_fonts</code> array and the meta-data tag in the AndroidManifest, you can avoid the delay until the font is downloaded by the first attempt. <code>xml &lt;resources&gt; &lt;array name=&quot;preloaded_fonts&quot; translatable=&quot;false&quot;&gt; &lt;item&gt;@font/lobster_two&lt;/item&gt; &lt;/array&gt; &lt;/resources&gt; </code></p>\n<p><code>xml &lt;application &gt; ... &lt;meta-data android:name=&quot;preloaded_fonts&quot; android:resource=&quot;@array/preloaded_fonts&quot; /&gt; ... &lt;/application&gt; </code></p>\n<p>Note that the sample uses Google Play Services as a font provider, which requires pre-released version of Google Play Services. You can sign up for the beta program so that the beta version of Google Play Services is downloaded to your device. https://developers.google.com/android/guides/beta-program If you have Google Play Services whose version number is equal or above 11.x.x, that means you have the compatible version installed. (You can confirm by navigating to Settings -&gt; Apps -&gt; Google Play Services)</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DownloadableFontsKotlin/screenshots/screenshot-1.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.provider.FontsContractCompat",
     "link": "https://developer.android.com/reference/android/provider/FontsContractCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontsContractCompat",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontsContractCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/DragAndDropAcrossApps",
   "title": "DragAndDropAcrossApps-new",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "DragAndDropAcrossApps/",
   "description": "This sample contains two separate Android applications: DragSource and DropTarget. DragSource contains images and text that can be dropped into the DropTarget app. Images are shared between the two apps through a URI for which the receiving app must request permission first, before it can be used.\nIt also demonstrates the use of the DragStartHelper from the v13 support library to easily handle drag and drop events.",
   "introduction": "<p>Android N introduces support for drag and drop between applications, augmenting the existing APIs that have enabled this within a single window before.</p>\n<p>To start a drag operation you need to call <code>View.startDragAndDrop</code>. Which gesture or action triggers this is up to you as an app developer. The API guide recommends doing this from <code>View.OnLongClickListener.onLongClick</code> and this seems to be the de-facto standard, but you are free to use other gestures (single tap, tap and drag etc). However, if you go for a unconventional drag start gesture, note that the framework implementation assumes that the pointer (touch or mouse) is down while the drag is starting, and the most recent touch/click position is used as the original position of the drag shadow.</p>\n<p>See also <code>android.support.v13.view.DragStartHelper</code> which uses different gestures for touch and mouse (click and drag works better for mouse than a long click).</p>\n<p>By default a drag and drop operation is constrained by the window containing the view that started the drag. To enable cross-window and cross-app drag and drop add <code>View.DRAG_FLAG_GLOBAL</code> to the flags passed to the <code>View.startDragAndDrop</code> call.</p>\n<p>If a Uri requiring permission grants is being sent, then the <code>android.view.View.DRAG_FLAG_GLOBAL_URI_READ</code> and/or the <code>android.view.View.DRAG_FLAG_GLOBAL_URI_WRITE</code> flags must be used also. To access content URIs requiring permissions on the receiving side, the target app needs to request the <code>android.view.DropPermissions</code> from the activity via <code>android.app.Activity.requestDropPermissions</code>. This permission will stay either until the activity is alive, or until the <code>release()</code> method is called on the <code>android.view.DropPermissions</code> object.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DragAndDropAcrossApps/screenshots/phone.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/DragAndDropAcrossApps/screenshots/tablet.png",
     "primary": false
    }
   ],
   "icon": "screenshots/big_icon.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.ClipDescription",
     "link": "https://developer.android.com/reference/android/content/ClipDescription.html"
    },
    {
     "namespace": "android",
     "name": "android.os.PersistableBundle",
     "link": "https://developer.android.com/reference/android/os/PersistableBundle.html"
    },
    {
     "namespace": "android",
     "name": "android.view.DragEvent",
     "link": "https://developer.android.com/reference/android/view/DragEvent.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v13.view.DragAndDropPermissionsCompat",
     "link": "https://developer.android.com/reference/android/support/v13/view/DragAndDropPermissionsCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v13.view.DragStartHelper",
     "link": "https://developer.android.com/reference/android/support/v13/view/DragStartHelper.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/ElevationBasic",
   "title": "ElevationBasic",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "ElevationBasic/",
   "description": "This sample demonstrates ways to move a view in the z-axis using <code>setTranslationZ()</code>. This method was introduced in API Level 21 ('Lollipop').",
   "introduction": "<p>This sample uses two shapes, a circle and a square, and it demonstrates two alternative ways to move a view in the z-axis. The first shape, the circle, has a fixed elevation, which is defined in XML. The second view, the square, changes its elevation using <a href=\"https://developer.android.com/training/material/shadows-clipping.html#Elevation\">setTranslationZ()</a> when a user touches it:</p>\n<pre><code>shape2.setOnTouchListener(new View.OnTouchListener() {\n    @Override\n    public boolean onTouch(View view, MotionEvent motionEvent) {\n        int action = motionEvent.getActionMasked();\n        /* Raise view on ACTION_DOWN and lower it on ACTION_UP. */\n        switch (action) {\n            case MotionEvent.ACTION_DOWN:\n                Log.d(TAG, &quot;ACTION_DOWN on view.&quot;);\n                view.setTranslationZ(120);\n                break;\n            case MotionEvent.ACTION_UP:\n                Log.d(TAG, &quot;ACTION_UP on view.&quot;);\n                view.setTranslationZ(0);\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n});\n</code></pre>\n<p>The elevation reverts back once the touch is removed.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/ElevationBasic/screenshots/fixed.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/ElevationBasic/screenshots/raised.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.MotionEvent",
     "link": "https://developer.android.com/reference/android/view/MotionEvent.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/ElevationDrag",
   "title": "ElevationDrag",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "ElevationDrag/",
   "description": "This sample demonstrates a drag and drop action on different shapes. Elevation and z-translation are used to render the shadows and the views are clipped using different Outlines.",
   "introduction": "<p>This sample demonstrates a drag and drop action on different shapes. Elevation and z-translation are used to render the shadows and the views are clipped using different Outlines.</p>\n<p>Elevation is considered the static or initial position of a view on the z axis, while translationZ exists for transient states, like animations.</p>\n<p><code>Z = elevation + translationZ</code></p>\n<p>See [Assign Elevation to Your Views][1] for more info. [1]:https://developer.android.com/training/material/shadows-clipping.html#Elevation</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/ElevationDrag/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.view.View",
     "link": "https://developer.android.com/reference/android/view/View.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/EmojiCompat",
   "title": "EmojiCompat",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "EmojiCompat/",
   "description": "This sample demonstrates usage of EmojiCompat support library. You can use this library to prevent your app from showing missing emoji characters in the form of tofu (□). You can use either bundled or downloadable emoji fonts. This sample shows both usages.",
   "introduction": "<p>The EmojiCompat support library aims to keep Android devices up to date with the latest emoji. It prevents your app from showing missing emoji characters in the form of ☐, which indicates that your device does not have a font to display the text. By using the EmojiCompat support library, your app users do not need to wait for Android OS updates to get the latest emoji.</p>\n<p>For further detail, read <a href=\"https://developer.android.com/preview/features/emoji-compat.html\">Emoji Compatibility</a> documentation.</p>\n<h3>Configuration</h3>\n<p>You need to first initialize EmojiCompat to load the metadata and the typeface. You can use either bundled or downloadable fonts.</p>\n<h4>Use downloadable fonts</h4>\n<p><strong><em>You need the beta version of Google Play Services to use this feature.</em></strong> Join <a href=\"https://developers.google.com/android/guides/beta-program\">Google Play Services Public Beta Program</a> and make sure you have v11 installed on your device running Android O Developer Preview 2.</p>\n<p>For the downloadable font configuration, you need to create an instance of the <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontRequest.html\">FontRequest</a> class, and provide the font provider authority, the font provider package, the font query, and a list of set of hashes for the certificates. For more information about FontRequest, refer to the Downloadable Fonts documentation. You can then create an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/FontRequestEmojiCompatConfig.html\">FontRequestEmojiCompatConfig</a> and pass it to EmojiCompat.init().</p>\n<p>```java final FontRequest fontRequest = new FontRequest( &quot;com.google.android.gms.fonts&quot;, &quot;com.google.android.gms&quot;, &quot;Noto Color Emoji Compat&quot;, R.array.com_google_android_gms_fonts_certs); EmojiCompat.init(new FontRequestEmojiCompatConfig(getApplicationContext(), fontRequest) .setReplaceAll(true) .registerInitCallback(new EmojiCompat.InitCallback() { @Override public void onInitialized() { Log.i(TAG, &quot;EmojiCompat initialized&quot;); }</p>\n<pre><code>                    @Override\n                    public void onFailed(@Nullable Throwable throwable) {\n                        Log.e(TAG, &quot;EmojiCompat initialization failed&quot;, throwable);\n                    }\n                });)\n</code></pre>\n<p>```</p>\n<h4>Use bundled font</h4>\n<p>In order the use the bundled font, call init() method of <a href=\"https://developer.android.com/reference/android/support/text/emoji/EmojiCompat.html\">EmojiCompat</a> with an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/bundled/BundledEmojiCompatConfig.html\">BundledEmojiCompatConfig</a>.</p>\n<h3>Use EmojiCompat</h3>\n<h4>Built-in views</h4>\n<p>The easiest way to use EmojiCompat in your layout, is to use <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatTextView.html\">EmojiAppCompatTextView</a>, <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatEditText.html\">EmojiAppCompatEditText</a>, or <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatButton.html\">EmojiAppCompatButton</a>. You can use them in your layout XMLs or code. You can just set any text containing emoji and the widgets handle the rest.</p>\n<h4>With regular TextViews</h4>\n<p>If you want to use EmojiCompat with a regular TextView, retrieve an instance of EmojiCompat by calling EmojiCompat.get() and call registerInitCallback method. You can pass an EmojiCompat.InitCallback and use the EmojiCompat#process() method there to transform emoji text into a backward-compatible format.</p>\n<h4>With custom TextViews</h4>\n<p>If you want to use EmojiCompat in your custom TextView, you can create an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiCompatViewHelper.html\">EmojiTextViewHelper</a> and use it in some overridden methods, namely setFilters and setAllCaps. <a href=\"https://github.com/googlesamples/android-EmojiCompat/blog/master/app/src/main/java/com/example/android/emojicompat/CustomTextView.java\">CustomTextView.java</a> shows what to do inside them.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/EmojiCompat/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.text.emoji.EmojiCompat",
     "link": "https://developer.android.com/reference/android/support/text/emoji/EmojiCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.bundled.BundledEmojiCompatConfig",
     "link": "https://developer.android.com/reference/android/support/text/emoji/bundled/BundledEmojiCompatConfig.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.FontRequestEmojiCompatConfig",
     "link": "https://developer.android.com/reference/android/support/text/emoji/FontRequestEmojiCompatConfig.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatTextView",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatTextView.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatEditText",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatEditText.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatButton",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatButton.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiTextViewHelper",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiTextViewHelper.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/EmojiCompatKotlin",
   "title": "EmojiCompat (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 25</li> \n <li>Android Build Tools v25.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "EmojiCompatKotlin/",
   "description": "This sample demonstrates usage of EmojiCompat support library. You can use this library to prevent your app from showing missing emoji characters in the form of tofu (□). You can use either bundled or downloadable emoji fonts. This sample shows both usages.",
   "introduction": "<p>The EmojiCompat support library aims to keep Android devices up to date with the latest emoji. It prevents your app from showing missing emoji characters in the form of ☐, which indicates that your device does not have a font to display the text. By using the EmojiCompat support library, your app users do not need to wait for Android OS updates to get the latest emoji.</p>\n<p>For further detail, read <a href=\"https://developer.android.com/preview/features/emoji-compat.html\">Emoji Compatibility</a> documentation.</p>\n<h3>Configuration</h3>\n<p>You need to first initialize EmojiCompat to load the metadata and the typeface. You can use either bundled or downloadable fonts.</p>\n<h4>Use downloadable fonts</h4>\n<p><strong><em>You need the beta version of Google Play Services to use this feature.</em></strong> Join <a href=\"https://developers.google.com/android/guides/beta-program\">Google Play Services Public Beta Program</a> and make sure you have v11 installed on your device running Android O Developer Preview 2.</p>\n<p>For the downloadable font configuration, you need to create an instance of the <a href=\"https://developer.android.com/reference/android/support/v4/provider/FontRequest.html\">FontRequest</a> class, and provide the font provider authority, the font provider package, the font query, and a list of set of hashes for the certificates. For more information about FontRequest, refer to the Downloadable Fonts documentation. You can then create an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/FontRequestEmojiCompatConfig.html\">FontRequestEmojiCompatConfig</a> and pass it to EmojiCompat.init().</p>\n<p>```java final FontRequest fontRequest = new FontRequest( &quot;com.google.android.gms.fonts&quot;, &quot;com.google.android.gms&quot;, &quot;Noto Color Emoji Compat&quot;, R.array.com_google_android_gms_fonts_certs); EmojiCompat.init(new FontRequestEmojiCompatConfig(getApplicationContext(), fontRequest) .setReplaceAll(true) .registerInitCallback(new EmojiCompat.InitCallback() { @Override public void onInitialized() { Log.i(TAG, &quot;EmojiCompat initialized&quot;); }</p>\n<pre><code>                    @Override\n                    public void onFailed(@Nullable Throwable throwable) {\n                        Log.e(TAG, &quot;EmojiCompat initialization failed&quot;, throwable);\n                    }\n                });)\n</code></pre>\n<p>```</p>\n<h4>Use bundled font</h4>\n<p>In order the use the bundled font, call init() method of <a href=\"https://developer.android.com/reference/android/support/text/emoji/EmojiCompat.html\">EmojiCompat</a> with an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/bundled/BundledEmojiCompatConfig.html\">BundledEmojiCompatConfig</a>.</p>\n<h3>Use EmojiCompat</h3>\n<h4>Built-in views</h4>\n<p>The easiest way to use EmojiCompat in your layout, is to use <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatTextView.html\">EmojiAppCompatTextView</a>, <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatEditText.html\">EmojiAppCompatEditText</a>, or <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatButton.html\">EmojiAppCompatButton</a>. You can use them in your layout XMLs or code. You can just set any text containing emoji and the widgets handle the rest.</p>\n<h4>With regular TextViews</h4>\n<p>If you want to use EmojiCompat with a regular TextView, retrieve an instance of EmojiCompat by calling EmojiCompat.get() and call registerInitCallback method. You can pass an EmojiCompat.InitCallback and use the EmojiCompat#process() method there to transform emoji text into a backward-compatible format.</p>\n<h4>With custom TextViews</h4>\n<p>If you want to use EmojiCompat in your custom TextView, you can create an instance of <a href=\"https://developer.android.com/reference/android/support/text/emoji/widget/EmojiCompatViewHelper.html\">EmojiTextViewHelper</a> and use it in some overridden methods, namely setFilters and setAllCaps. <a href=\"https://github.com/googlesamples/android-EmojiCompat/blog/master/app/src/main/java/com/example/android/emojicompat/CustomTextView.java\">CustomTextView.java</a> shows what to do inside them.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/EmojiCompat/screenshots/1-main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.text.emoji.EmojiCompat",
     "link": "https://developer.android.com/reference/android/support/text/emoji/EmojiCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.bundled.BundledEmojiCompatConfig",
     "link": "https://developer.android.com/reference/android/support/text/emoji/bundled/BundledEmojiCompatConfig.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.FontRequestEmojiCompatConfig",
     "link": "https://developer.android.com/reference/android/support/text/emoji/FontRequestEmojiCompatConfig.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.provider.FontRequest",
     "link": "https://developer.android.com/reference/android/support/v4/provider/FontRequest.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatTextView",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatTextView.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatEditText",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatEditText.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiAppCompatButton",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiAppCompatButton.html"
    },
    {
     "namespace": "android",
     "name": "android.support.text.emoji.widget.EmojiTextViewHelper",
     "link": "https://developer.android.com/reference/android/support/text/emoji/widget/EmojiTextViewHelper.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623066953000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/ImmersiveMode",
   "title": "ImmersiveMode",
   "status": "PUBLISHED",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "ImmersiveMode/",
   "description": "&quot;Immersive mode&quot; is intended for apps in which users will be heavily interacting with the screen. With this API, apps can hide the status bar, the navigation bar, or both. When users need to bring back the system bars, they swipe from any edge where a system bar is hidden.\n&quot;Immersive mode&quot; was originally introduced in Android 4.4 KitKat (API level 19). <a href=\"https://developer.android.com/reference/android/view/View#setSystemUiVisibility(int)\">View.setSystemUiVisibility</a> and other APIs provided ability to toggle visibility of System UI windows, such as the status bar and the navigation bar. The API was overhauled in Android 11 (API level 30), and apps can now use <a href=\"https://developer.android.com/reference/android/view/WindowInsetsController\">WindowInsetsController</a> and other APIs to control the behavior and visibility of System UI windows that affect <a href=\"https://developer.android.com/reference/android/view/WindowInsets\">WindowInsets</a>. Alternatively, apps can use <a href=\"https://developer.android.com/reference/androidx/core/view/WindowInsetsControllerCompat\">WindowInsetsControllerCompat</a> to implement this feature in a backward-compatible manner.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1627533459000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/Notifications",
   "title": "Notifications",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 29</li> \n <li>Android Build Tools</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "notification",
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "Notifications/",
   "description": "Sample demonstrates best practices for using NotificationStyle Notifications (Inbox, BigPicture, BigText, and Messaging) for both Mobile apps and native/local Wear apps. It also covers Notifications on Wear 1.+ and Wear 2.0.",
   "introduction": "<p>Steps for trying out the sample: * Compile and install the mobile app onto your mobile device or emulator (for mobile scenario). * Compile and install the wearable app onto your Wear device or emulator (for Wear scenario).</p>\n<p>This sample demonstrate best practices for using <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.Style.html\">NotificationStyle</a> <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html\">Notifications</a> for two scenarios:</p>\n<ol> \n <li><p>Launching Notifications from a Mobile app WITHOUT a native Wear app. Notifications appear both on mobile and Wear (bridged to appear like a local/native Wear app).</p></li> \n <li><p>Launching Notifications from a Native/Local Wear app. Notifications only appear on Wear device.</p></li> \n</ol>\n<p>The Mobile and Wear apps demonstrate <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigTextStyle.html\">BigTextStyle</a>, <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.BigPictureStyle.html\">BigPictureStyle</a>, <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.InboxStyle.html\">InboxStyle</a>, and <a href=\"https://developer.android.com/reference/android/support/v4/app/NotificationCompat.MessagingStyle.html\">MessagingStyle</a> Notifications.</p>\n<p>Although there are two apps (Mobile and Wear) running, each should be looked at as a separate experience. That is, neither app uses nor relies on the other.</p>\n<p>They are packaged together simply to show both scenarios in one easy sample.</p>\n<p>Both apps also cover the Notifications being displayed on Wear 1.+ and/or Wear 2.0 and using some of the new features of Wear 2.0 (inline actions).</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/Notifications/screenshots/mobile-1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/Notifications/screenshots/mobile-2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/Notifications/screenshots/wear-1.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/Notifications/screenshots/wear-2.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.app.Notification",
     "link": "https://developer.android.com/reference/android/app/Notification.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationCompat.BigPictureStyle",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationCompat/BigPictureStyle.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationCompat.BigTextStyle",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationCompat/BigTextStyle.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationCompat.InboxStyle",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationCompat/InboxStyle.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationCompat.MessagingStyle",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationCompat/MessagingStyle.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationManagerCompat",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationManagerCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.RemoteInput",
     "link": "https://developer.android.com/reference/android/support/v4/app/RemoteInput.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.TaskStackBuilder",
     "link": "https://developer.android.com/reference/android/support/v4/app/TaskStackBuilder.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.app.AppCompatActivity",
     "link": "https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.app.NotificationCompat",
     "link": "https://developer.android.com/reference/android/support/v7/app/NotificationCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/TextLinkify",
   "title": "TextLinkify",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "TextLinkify/",
   "description": "This sample illustrates how links can be added to a TextView. This can be done either automatically by setting the &quot;autoLink&quot; property or explicitly.",
   "introduction": "<p>This sample demonstrates how clickable links can be added to a <code>TextView</code> in Android.</p>\n<p>This can be done in three ways:</p>\n<ul> \n <li><strong>Automatically:</strong> Text added to a TextView can automatically be linkified by enabling autoLinking. In XML, use the <code>android:autoLink</code> property, programatically call <a href=\"http://developer.android.com/reference/android/widget/TextView.html#setAutoLinkMask(int)\">android.widget.TextView#setAutoLinkMask(int)</a> using an option from <a href=\"http://developer.android.com/reference/android/text/util/Linkify.html\">android.text.util.Linkify</a>.</li> \n <li><strong>Parsing a String as HTML:</strong> See <a href=\"http://developer.android.com/reference/android/text/Html.html#fromHtml(java.lang.String)\">android.text.Html#fromHtml(String)</a>.</li> \n <li><strong>Manually by constructing a <a href=\"http://developer.android.com/reference/android/text/SpannableString.html\">android.text.SpannableString</a>:</strong> Consisting of <a href=\"http://developer.android.com/reference/android/text/style/StyleSpan.html\">android.text.style.StyleSpan</a> and <a href=\"http://developer.android.com/reference/android/text/style/URLSpan.html\">android.text.style.URLSpan</a> objects that are contained within a <a href=\"http://developer.android.com/reference/android/text/SpannableString.html\">android.text.SpannableString</a>.</li> \n</ul>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/TextLinkify/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.widget.TextView",
     "link": "https://developer.android.com/reference/android/widget/TextView.html"
    },
    {
     "namespace": "android",
     "name": "android.text.util.Linkify",
     "link": "https://developer.android.com/reference/android/text/util/Linkify.html"
    },
    {
     "namespace": "android",
     "name": "android.text.Html",
     "link": "https://developer.android.com/reference/android/text/Html.html"
    },
    {
     "namespace": "android",
     "name": "android.text.SpannableString",
     "link": "https://developer.android.com/reference/android/text/SpannableString.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.StyleSpan",
     "link": "https://developer.android.com/reference/android/text/style/StyleSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.URLSpan",
     "link": "https://developer.android.com/reference/android/text/style/URLSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.SpannableString",
     "link": "https://developer.android.com/reference/android/text/SpannableString.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/TextRoundedBackgroundKotlin",
   "title": "Drawing a rounded corner background on text",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "TextRoundedBackgroundKotlin/",
   "description": "This sample shows how to draw a <strong>rounded</strong> corner background on text. It supports the following cases:\n<li>Set the background on <strong>one line</strong> text</li>\n<img src=\"../TextRoundedBackgroundKotlin/screenshots/single.png\" width=\"30%\" />\n<li>Set the background on text over <strong>two or multiple lines</strong></li>\n<img src=\"../TextRoundedBackgroundKotlin/screenshots/multi.png\" width=\"30%\" />\n<li>Set the background on <strong>right-to-left</strong> text</li>\n<img src=\"../TextRoundedBackgroundKotlin/screenshots/rtl.png\" width=\"30%\" />",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/TextRoundedBackgroundKotlin/screenshots/rounded_bg.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon_web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.text.SpannableStringBuilder",
     "link": "https://developer.android.com/reference/android/text/SpannableStringBuilder.html"
    },
    {
     "namespace": "android",
     "name": "android.text.Spanned",
     "link": "https://developer.android.com/reference/android/text/Spanned.html"
    },
    {
     "namespace": "android",
     "name": "android.text.SpannedString",
     "link": "https://developer.android.com/reference/android/text/SpannedString.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.StyleSpan",
     "link": "https://developer.android.com/reference/android/text/style/StyleSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.RelativeSizeSpan",
     "link": "https://developer.android.com/reference/android/text/style/RelativeSizeSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.MetricAffectingSpan",
     "link": "https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/TextStyling",
   "title": "Text Styling",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "TextStyling/",
   "description": "This sample shows how to style text on Android using spans, in Java.",
   "introduction": "",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/TextStyling/screenshots/main_activity.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon_web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.text.SpannableStringBuilder",
     "link": "https://developer.android.com/reference/android/text/SpannableStringBuilder.html"
    },
    {
     "namespace": "android",
     "name": "android.text.Spanned",
     "link": "https://developer.android.com/reference/android/text/Spanned.html"
    },
    {
     "namespace": "android",
     "name": "android.text.SpannedString",
     "link": "https://developer.android.com/reference/android/text/SpannedString.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.StyleSpan",
     "link": "https://developer.android.com/reference/android/text/style/StyleSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.RelativeSizeSpan",
     "link": "https://developer.android.com/reference/android/text/style/RelativeSizeSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.MetricAffectingSpan",
     "link": "https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/user-interface-samples/TextStylingKotlin",
   "title": "Text Styling",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "user interface"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/user-interface-samples/",
   "github": "android/user-interface",
   "branch": "main",
   "path": "TextStylingKotlin/",
   "description": "This sample shows how to style text on Android using spans, in Kotlin, using <a href=\"https://github.com/android/android-ktx\">Android KTX</a>.",
   "introduction": "",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/user-interface-samples/main/TextStylingKotlin/screenshots/main_activity.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon_web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.text.SpannableStringBuilder",
     "link": "https://developer.android.com/reference/android/text/SpannableStringBuilder.html"
    },
    {
     "namespace": "android",
     "name": "android.text.Spanned",
     "link": "https://developer.android.com/reference/android/text/Spanned.html"
    },
    {
     "namespace": "android",
     "name": "android.text.SpannedString",
     "link": "https://developer.android.com/reference/android/text/SpannedString.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.StyleSpan",
     "link": "https://developer.android.com/reference/android/text/style/StyleSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.RelativeSizeSpan",
     "link": "https://developer.android.com/reference/android/text/style/RelativeSizeSpan.html"
    },
    {
     "namespace": "android",
     "name": "android.text.style.MetricAffectingSpan",
     "link": "https://developer.android.com/reference/android/text/style/MetricAffectingSpan.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1612882409000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/AnimationsInterpolatorPlayground",
   "title": "Interpolator Playground",
   "status": "PUBLISHED",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "AnimationsInterpolatorPlayground/",
   "description": "This application shows how the various Interpolator implementations in the platform work. You can vary the duration of the animation as well as the constructor parameters of any of the variable interpolators and use the values in the UI to inform how to write your code that uses that interpolator. Changes to the animation parameters will be reflected dynamically in the blue curve and running the animation will show the animation in action (with the red circles on the curve as well as in the open area at the bottom).\nTo use: * Select any of the built-in interpolators from the drop-down list at the top * Use the slider(s) to change the animation duration and/or any of the variable parameters for the selected interpolator * For Quadratic and Cubic Path interpolators, drag the green handle(s) to position the control points of the curve * Click the 'Run' button to see the animation in action * Note the values of the duration and other parameters to use in your animation code\n<img src=\"screenshot.png\" alt=\"InterolatorPlayground screenshot\" \"=\"\" />",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623089487000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/CardView",
   "title": "CardView",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "CardView/",
   "description": "This sample demonstrates how to use CardView introduced in the support library in Android 5.0.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623089487000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/CardViewKotlin",
   "title": "CardView (Kotlin)",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 27</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "CardViewKotlin/",
   "description": "This sample demonstrates how to use CardView introduced in the support library in Android 5.0.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623089487000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/ConstraintLayoutExamples",
   "title": "MotionLayout / Constraint Layout",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android Studio 3.3+</li> \n <li>Constraint Layout library 2.0.0-alpha5+</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "ConstraintLayoutExamples/",
   "description": "This repository contains a list of layouts that showcases the various features and usage of <a href=\"https://developer.android.com/reference/android/support/constraint/ConstraintLayout.html\">ConstraintLayout</a> and <a href=\"https://developer.android.com/reference/android/support/constraint/motion/MotionLayout\">MotionLayout</a>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/ConstraintLayoutExamples/screenshots/constraint_set_example.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/ConstraintLayoutExamples/screenshots/advanced_chains.png",
     "primary": false
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1623089487000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/MultiWindowPlayground",
   "title": "MultiWindowPlayground",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 24</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "MultiWindowPlayground/",
   "description": "This sample demonstrates the use of the multi-window API available in Android N. It shows the use of new Intent flags and AndroidManifest properties to define the multi-window behavior. Switch the sample app into multi-window mode to see how it affects the lifecycle and behavior of the app.",
   "introduction": "<p>Android N introduces new APIs to support multiple activities to be displayed at the same time.</p>\n<p>Activities that are started within the same task stack inherit their multiwindow properties from the activity that fired off the intent. The following features are available when an activity has been launched into a new task stack.</p>\n<p>An activity can be set as not resizable through the <code>android:resizableActivity</code> property in the AndroidManifest. All applications targeting Android N or above are resizable by default.</p>\n<p>In split-screen mode, an activity can be started adjacent to the launching activity by setting the <code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code> flag in its intent.</p>\n<p>Sometimes activities may choose to handle configuration changes themselves (for example for games or OpenGL-based applications). In this case, setting <code>android:configChanges=screenSize|smallestScreenSize|screenLayout|orientation</code> in the AndroidManifest definition of the activity enables callbacks for all configuration changes that may occur during multi-window use for the Activity. See <a href=\"https://developer.android.com/guide/topics/resources/runtime-changes.html\">Handling Runtime Changes</a>.</p>\n<p>In freeform mode (where applications can be freely resized), activities can be started within a certain area of the screen using the <code>ActivityOptions#setLaunchBounds</code> call.</p>\n<p>Alternatively, the preferred and minimum sizes can be set in a new <code>layout</code> property in the AndroidManifest.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/MultiWindowPlayground/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.Intent",
     "link": "https://developer.android.com/reference/android/content/Intent.html"
    },
    {
     "namespace": "android",
     "name": "android.app.ActivityOptions",
     "link": "https://developer.android.com/reference/android/app/ActivityOptions.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568223049000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/MultiWindowPlaygroundKotlin",
   "title": "MultiWindowPlayground (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 27</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "MultiWindowPlaygroundKotlin/",
   "description": "This sample demonstrates the use of the multi-window API available in Android N. It shows the use of new Intent flags and AndroidManifest properties to define the multi-window behavior. Switch the sample app into multi-window mode to see how it affects the lifecycle and behavior of the app.",
   "introduction": "<p>Android N introduces new APIs to support multiple activities to be displayed at the same time.</p>\n<p>Activities that are started within the same task stack inherit their multiwindow properties from the activity that fired off the intent. The following features are available when an activity has been launched into a new task stack.</p>\n<p>An activity can be set as not resizable through the <code>android:resizableActivity</code> property in the AndroidManifest. All applications targeting Android N or above are resizable by default.</p>\n<p>In split-screen mode, an activity can be started adjacent to the launching activity by setting the <code>Intent.FLAG_ACTIVITY_LAUNCH_TO_ADJACENT</code> flag in its intent.</p>\n<p>Sometimes activities may choose to handle configuration changes themselves (for example for games or OpenGL-based applications). In this case, setting <code>android:configChanges=screenSize|smallestScreenSize|screenLayout|orientation</code> in the AndroidManifest definition of the activity enables callbacks for all configuration changes that may occur during multi-window use for the Activity. See <a href=\"https://developer.android.com/guide/topics/resources/runtime-changes.html\">Handling Runtime Changes</a>.</p>\n<p>In freeform mode (where applications can be freely resized), activities can be started within a certain area of the screen using the <code>ActivityOptions#setLaunchBounds</code> call.</p>\n<p>Alternatively, the preferred and minimum sizes can be set in a new <code>layout</code> property in the AndroidManifest.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/MultiWindowPlaygroundKotlin/screenshots/main.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.content.Intent",
     "link": "https://developer.android.com/reference/android/content/Intent.html"
    },
    {
     "namespace": "android",
     "name": "android.app.ActivityOptions",
     "link": "https://developer.android.com/reference/android/app/ActivityOptions.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568223061000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/RecyclerView",
   "title": "RecyclerView",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "RecyclerView/",
   "description": "Sample demonstrating the use of RecyclerView to layout elements with a LinearLayoutManager and with a GridLayoutManager. It also demonstrates how to handle touch events on elements.",
   "introduction": "<p>Sample demonstrating the use of <a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html\">RecyclerView</a> to layout elements with a <a href=\"https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html\">LinearLayoutManager</a> or with a <a href=\"https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html\">GridLayoutManager</a>.</p>\n<p><a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html\">RecyclerView</a> can display large datasets that can be scrolled efficiently by recycling a limited number of views. Click listeners can be defined when <a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ViewHolder.html\">ViewHolder</a> views are instantiated. <a href=\"https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html\">RecyclerView</a> is available in the v7 Support Library, thus compatible with API level 7 and above.</p>\n<p>Tap &quot;Show Log&quot; menu item to display log of elements as they are laid out and tapped. Use radio buttons to toggle between <a href=\"https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html\">LinearLayoutManager</a> and <a href=\"https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html\">GridLayoutManager</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/RecyclerView/screenshots/1-linear.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/views-widgets-samples/main/RecyclerView/screenshots/2-grid.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.v7.widget.RecyclerView",
     "link": "https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.widget.LinearLayoutManager",
     "link": "https://developer.android.com/reference/android/support/v7/widget/LinearLayoutManager.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.widget.GridLayoutManager",
     "link": "https://developer.android.com/reference/android/support/v7/widget/GridLayoutManager.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.widget.RecyclerView.ViewHolder",
     "link": "https://developer.android.com/reference/android/support/v7/widget/RecyclerView/ViewHolder.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568223075000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/RecyclerViewKotlin",
   "title": "RecyclerView (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 27</li> \n <li>Android Gradle Plugin 3.0</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "RecyclerViewKotlin/",
   "description": "This application implements a RecyclerView in Kotlin with ListAdapter, onClickListener and Headers. If you are looking for a simpler sample, look at the RecyclerViewSimple sample in the directory.",
   "introduction": "<p>Sample demonstrating the use of <a href=\"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView\">RecyclerView</a> to layout elements with a <a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/LinearLayoutManager\">LinearLayoutManager</a>.</p>\n<p><a href=\"https://developer.android.com/reference/kotlin/androidx/recyclerview/widget/RecyclerView\">RecyclerView</a> can display large datasets that can be scrolled efficiently by recycling a limited number of views. <a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/ListAdapter\">ListAdapter</a> is used to efficiently compute diffs when items are added/removed from the list. Click listeners can be defined when <a href=\"https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.ViewHolder\">ViewHolder</a> views are instantiated. </p>",
   "screenshots": [
    {
     "link": "https://user-images.githubusercontent.com/46006059/98028846-8b6df700-1dc3-11eb-9f0b-ad93569be189.png",
     "primary": true
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.recyclerview.widget.RecyclerView",
     "link": "https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView.html"
    },
    {
     "namespace": "android",
     "name": "androidx.recyclerview.widget.RecyclerView.LayoutManager",
     "link": "https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView/LayoutManager.html"
    },
    {
     "namespace": "android",
     "name": "androidx.recyclerview.widget.RecyclerView.ViewHolder",
     "link": "https://developer.android.com/reference/androidx/recyclerview/widget/RecyclerView/ViewHolder.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1616111042000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/SimpleTransition",
   "title": "Transitions",
   "status": "PUBLISHED",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "SimpleTransition/",
   "description": "This application shows how to use the Transitions API in the Android Support Library. While transitions have worked on the platform since the KitKat release (API level 19), there was previously no way to use transitions on devices running earlier releases. Now you can use the Support Library API instead to run on Android releases back to Ice Cream Sandwich (API level 14).\nNote that the Support Library APIs have the following limitations, compared to transitions in the framework APIs:\n<li>The Support Library API is specifically about view transitions, the same as we offered in the KitKat release. Later capabilities such as Activity Transitions, depend on platform capabilities that cannot be supported on earlier releases.</li> \n<li>KitKat transitions offer the ability to use XML resource files to define transitions, scenes, and transition graphs. Support Library transitions, on the other hand, only allow setting up transitions from code; there are no such resource files available in the Support Library.</li>\nTo use the transitions demo application:\n<li>Click on one of the buttons to move the entire group of buttons to the location specified in the button text. Note how the buttons animate into place (via the single call to TransitionManager.beginDelayedTransition()).</li> \n<li>Check the &quot;Stagger&quot; checkbox to indicate whether the transitions should run in a staggered fashion, one after the other. When this happens, the buttons will start one at a time, by creating a custom TransitionSet of child transitions with different target views and startDelays.</li>\n<img src=\"TransitionsOnJbEmulator.png\" alt=\"Transitions screenshot\" \"=\"\" />\nFor more information on transitions, see the following resources:\n<li><a href=\"https://developer.android.com/topic/libraries/support-library/revisions.html\">Support Library versions</a> (use version 24.2.0+ for the transitions API)</li> \n<li><a href=\"https://developer.android.com/reference/android/support/transition/package-summary.html\">android.support.transitions</a> reference documentation</li> \n<li><a href=\"https://developer.android.com/training/transitions/index.html\">Developer training on Transitions</a></li>",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568772928000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/SwipeRefreshLayoutBasic",
   "title": "SwipeRefreshLayoutBasic",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "SwipeRefreshLayoutBasic/",
   "description": "A basic sample which shows how to use SwipeRefreshLayout to add the 'swipe-to-refresh' gesture to a View, enabling the ability to trigger a refresh from swiping down on the view. In this sample the View which can be refreshed is a ListView.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568223133000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/SwipeRefreshMultipleViews",
   "title": "SwipeRefreshMultipleViews",
   "status": "PUBLISHED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v28.0.3</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets",
   "branch": "main",
   "path": "SwipeRefreshMultipleViews/",
   "description": "A sample which shows how to use SwipeRefreshLayout to add the 'swipe-to-refresh' gesture to a layout with multiple children, enabling the ability to trigger a refresh from swiping down on the visible view. In this sample, SwipeRefreshLayout contains a scrollable GridView, along with a TextView empty view.",
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1568223143000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/views-widgets-samples/ViewPager2",
   "title": "ViewPager2 samples",
   "status": "PUBLISHED",
   "level": "BEGINNER",
   "technologies": [
    "android"
   ],
   "categories": [
    "views widgets"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/views-widgets-samples/",
   "github": "android/views-widgets-samples",
   "branch": "main",
   "path": "ViewPager2/",
   "description": "This sample shows how to use <a href=\"https://developer.android.com/reference/androidx/viewpager2/widget/ViewPager2\">ViewPager2</a> with either Views or Fragments as pages, how to perform page transformations, how to link ViewPager2 to a TabLayout, and demonstrates handling modifications of an underlying page adapter collection.\nViewPager2 is the replacement of <a href=\"https://developer.android.com/reference/androidx/viewpager/widget/ViewPager\">ViewPager</a>, addressing most of its predecessor's pain-points, including right-to-left layout support, vertical orientation and modifiable Fragment collections.\nSamples\n<li>ViewPager2 with Views - shows how to set up a ViewPager2 with Views as pages</li> \n<li>ViewPager2 with Fragments - shows how to set up a ViewPager2 with Fragments as pages</li> \n<li>ViewPager2 with a Mutable Collection (Views) - demonstrates usage of ViewPager2 with Views as pages and mutations in a page adapter</li> \n<li>ViewPager2 with a Mutable Collection (Fragments) - demonstrates usage of ViewPager2 with Fragments as pages, and mutations in a page adapter</li> \n<li>ViewPager2 with a TabLayout (Views) - shows how to set up a ViewPager2 with Views as pages, and link it to a TabLayout</li>",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.viewpager2.adapter.FragmentStateAdapter",
     "link": "https://developer.android.com/reference/androidx/viewpager2/adapter/FragmentStateAdapter.html"
    },
    {
     "namespace": "android",
     "name": "androidx.viewpager2.adapter.FragmentViewHolder",
     "link": "https://developer.android.com/reference/androidx/viewpager2/adapter/FragmentViewHolder.html"
    },
    {
     "namespace": "android",
     "name": "androidx.viewpager2.adapter.StatefulAdapter",
     "link": "https://developer.android.com/reference/androidx/viewpager2/adapter/StatefulAdapter.html"
    },
    {
     "namespace": "android",
     "name": "androidx.viewpager2.widget.ViewPager2",
     "link": "https://developer.android.com/reference/androidx/viewpager2/widget/ViewPager2.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1580140824000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/AlwaysOnKotlin",
   "title": "AlwaysOn (Kotlin)",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 30</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "AlwaysOnKotlin/",
   "description": "A basic sample showing how to support ambient mode for native Wear apps.",
   "introduction": "<p>The <a href=\"https://developer.android.com/reference/androidx/wear/ambient/AmbientModeSupport\">AmbientModeSupport</a> class offers methods for supporting your native app staying on the screen when the Wear device enters ambient mode.</p>\n<p>This example implements the <a href=\"https://developer.android.com/reference/androidx/wear/ambient/AmbientModeSupport.AmbientCallbackProvider\">AmbientCallbackProvider</a> interface and provides behavior for onEnterAmbient, onUpdateAmbient, and onExitAmbient to allow the simple native Wear app to support ambient mode. In ambient mode, this app follows best practices by keeping most pixels black, avoiding large blocks of white pixels, using only black and white, and disabling anti-aliasing (following the <a href=\"https://developer.android.com/training/wearables/watch-faces/designing.html#DesignGuidelines\">design guidelines for Watch Faces</a>).</p>\n<p>In addition and most importantly, the app sleeps while in ambient mode for 10 seconds between any updates to conserve battery life (processor allowed to sleep). If you can hold off on updates for a full minute, you can avoid <code>AlarmManager</code> and just use onUpdateAmbient to save even more battery life.</p>\n<p>As always, you will still want to apply the <a href=\"https://developer.android.com/training/wearables/watch-faces/performance.html\">performance guidelines</a> outlined in the Watch Face documentation to your app.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/AlwaysOnKotlin/screenshots/1-main-active.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/AlwaysOnKotlin/screenshots/2-main-ambient.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/AlwaysOnKotlin/screenshots/3-main-active-round.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/AlwaysOnKotlin/screenshots/4-main-ambient-round.png",
     "primary": false
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.activity.WearableActivity",
     "link": "https://developer.android.com/reference/android/support/wearable/activity/WearableActivity.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629313305000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/DataLayer",
   "title": "DataLayer",
   "status": "PUBLISHED",
   "level": "ADVANCED",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v29.0.2</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "DataLayer/",
   "description": "This sample demonstrates how to work with a WearableListenerService, to produce and consume DataEvents and effectively work with the DataLayer.",
   "introduction": "<p>This sample demonstrates how to make a handheld and an Wear device communicate using the <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/DataClient\">DataClient</a>. It does this by sending a picture between connected devices.</p>\n<p>An Activity is being used for both the connected devices which implement their parts of the required interfaces.</p>\n<p>It showcases how to use an <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/WearableListenerService\">WearableListenerService</a> to consume DataEvents as well as implementations for various required listeners when using the <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/DataClient\">DataClient</a>, <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/MessageClient\">MessageClient</a> and <a href=\"https://developers.google.com/android/reference/com/google/android/gms/wearable/NodeClient\">NodeClient</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/DataLayer/screenshots/phone_image.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/DataLayer/screenshots/wearable_background_image.png",
     "primary": false
    }
   ],
   "icon": "Application/src/main/res/drawable-xxhdpi/ic_launcher.png",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.wearable.DataApi",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/wearable/DataApi"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.wearable.DataEvent",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/wearable/DataEvent"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.wearable.WearableListenerService",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/wearable/WearableListenerService"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1626379889000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/RuntimePermissionsWear",
   "title": "RuntimePermissionsWear",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v29.0.2</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable",
    "permissions"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "RuntimePermissionsWear/",
   "description": "A sample that shows how you can handle remote data that requires permissions both on a wearable device and a mobile device.",
   "introduction": "<p>Steps for trying out this sample: * Compile and install the mobile app onto your mobile device or emulator. * Compile and install the wearable app onto your Wear device or emulator. (**Note:** wearable apps are not automatically pushed from your mobile device unless you build a production release, see <a href=\"https://developer.android.com/training/wearables/apps/creating.html#Install\">here</a> for more info). * Start the mobile or wear app. Each app contains two buttons: one for showing local data and another for showing remote data. * Click either button to view the data. Both local and remote data require <a href=\"http://developer.android.com/guide/topics/security/permissions.html#normal-dangerous\">dangerous permissions</a> to be approved before displaying the data for devices running 23 or above. You will be asked to approve the access if you do not have the proper permissions. * The happy icon signifies you have access to the data while the sad icon signifies you do or may not have access (and may be asked to approve access).</p>\n<p>This sample demonstrates how to access data and trigger permission approval on remote devices. It uses <a href=\"http://developer.android.com/guide/components/services.html\">Services</a> and the <a href=\"https://developer.android.com/reference/com/google/android/gms/wearable/MessageApi.html\">Wearable MessageApi</a> to communicate between devices.</p>\n<p>To find out more about wear, visit our <a href=\"http://developer.android.com/wear/\">developer Wear page</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/RuntimePermissionsWear/screenshots/screenshot-wear.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/RuntimePermissionsWear/screenshots/screenshot-phone.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.v4.app.ActivityCompat",
     "link": "https://developer.android.com/reference/android/support/v4/app/ActivityCompat.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v7.app.AppCompatActivity",
     "link": "https://developer.android.com/reference/android/support/v7/app/AppCompatActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.activity.WearableActivity",
     "link": "https://developer.android.com/reference/android/support/wearable/activity/WearableActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.WatchViewStub",
     "link": "https://developer.android.com/reference/android/support/wearable/view/WatchViewStub.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.common.api.GoogleApiClient",
     "link": "https://developer.android.com/reference/com/google/android/gms/common/api/GoogleApiClient.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.CapabilityApi",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/CapabilityApi.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.CapabilityInfo",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/CapabilityInfo.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.DataMap",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/DataMap.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.MessageApi",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/MessageApi.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.MessageEvent",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/MessageEvent.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.Node",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/Node.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.Wearable",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/Wearable.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.WearableListenerService",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/WearableListenerService.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629837832000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WatchFace",
   "title": "WatchFace",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v29.0.2</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WatchFace/",
   "description": "A simple sample that demonstrates watch faces and complications for Wear 2.0.",
   "introduction": "<p>This sample demonstrates how to create watch faces for Wear.</p>\n<p>The analog watch face covers best practices for Wear 2.0 including complications and a new configuration Activity for configuring both the watch face styles and the complications themselves. We recommend you reuse the configuration code and follow the UX patterns in your watch face's configuration activity. You can see a preview in the screenshots section of the README.</p>\n<p>The analog watch face has three main classes:</p>\n<ul> \n <li><p>AnalogComplicationWatchFaceService.java (watchface folder) - Renders the watch face and active complications.</p></li> \n <li><p>AnalogComplicationConfigActivity.java (config folder) - Allows user to adjust watch face settings (arm and background colors) and watch face complications.</p></li> \n <li><p>AnalogComplicationConfigData.java (models folder) - Populates the configuration screen in the previous step by returning a list of items. Each item represents something you can customize on the watch face. Items include a preview of the watch face (where you can pick your complications), marker color, background color, unread notifications, and background image complication. You can extend this and add your own.</p></li> \n</ul>\n<p>We include several older watch faces to show best practices for Wear 1.0. If you are targeting older devices, you may want to review those watch faces (digital, opengl, and interactive).</p>\n<p>The digital watch face includes a watch-side and phone-side configuration example.</p>\n<p>This sample includes both a phone app and a wearable app.</p>\n<p>Because watch face apps do not have a default Activity in their project, you will need to set your Configurations to &quot;Do not launch Activity&quot; for both the Wear and Application modules. If you are unsure how to do this, please review the &quot;Run Starter project&quot; section in the <a href=\"https://codelabs.developers.google.com/codelabs/watchface/index.html\">Google Watch Face Code Lab</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/analog-face.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/analog-watch-side-config-all.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/analog-watch-side-config-1.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/analog-watch-side-config-2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/digital-face.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/digital-phone-side-config.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/digital-watch-side-config.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/interactive-face.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WatchFace/screenshots/tilt-face.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationData",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationData.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationHelperActivity",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationHelperActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationProviderInfo",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationProviderInfo.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationText",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationText.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ProviderChooserIntent",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ProviderChooserIntent.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.WearableRecyclerView",
     "link": "https://developer.android.com/reference/android/support/wearable/view/WearableRecyclerView.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.watchface.CanvasWatchFaceService",
     "link": "https://developer.android.com/reference/android/support/wearable/watchface/CanvasWatchFaceService.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.watchface.WatchFaceService",
     "link": "https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.watchface.WatchFaceStyle",
     "link": "https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceStyle.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1626379889000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearAccessibilityApp",
   "title": "WearAccessibilityApp",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v29.0.2</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearAccessibilityApp/",
   "description": "Sample demonstrates how to include accessibility support for your wearable app.",
   "introduction": "<p>Accessibility is an important part of any app (especially wearable apps). By integrating accessible components and services, you can improve your app's usability, particularly for users with disabilities.</p>\n<pre><code>        This sample demonstrates common UX patterns in wearable apps along with accessibility\n        support of those patterns. Be sure to review the [Accessibility Developer Checklist][1]\n        for your own app. For additional information please see our\n        [Best Practices for User Interface][2] page.\n\n        [1]: https://developer.android.com/guide/topics/ui/accessibility/checklist.html\n        [2]: https://developer.android.com/training/accessibility/index.html\n</code></pre>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearAccessibilityApp/screenshots/main_screen.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearAccessibilityApp/screenshots/progress_screen.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearAccessibilityApp/screenshots/controls_screen.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wear.widget.WearableRecyclerView",
     "link": "https://developer.android.com/reference/android/support/wear/widget/WearableRecyclerView.html"
    },
    {
     "namespace": "android",
     "name": "android.preference.Preference",
     "link": "https://developer.android.com/reference/android/preference/Preference.html"
    },
    {
     "namespace": "android",
     "name": "android.support.v4.app.NotificationCompat",
     "link": "https://developer.android.com/reference/android/support/v4/app/NotificationCompat.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1626379889000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearComplicationDataSourcesTestSuite",
   "title": "WearComplicationProvidersTestSuite",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 30</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearComplicationDataSourcesTestSuite/",
   "description": "Complication Test Suite is a set of complication data sources that provide dummy data and it can be used to test how different types of complications render on a watch face.",
   "introduction": "<p>Steps for trying out the sample: * Compile and install the wearable app onto your Wear device or emulator (for Wear scenario).</p>\n<ul> \n <li>This sample does not have a main Activity (just Services that provide the complication data). Therefore, you may see an error next to the 'Run' button. To fix, click on the &quot;Wearable&quot; dropdown next to the 'Run' button and select 'Edit Configurations'. Under the 'Launch Options', change the 'Launch' field from 'Default APK' to 'Nothing' and save.</li> \n</ul>\n<p>This sample provides dummy data for testing the complications UI in your watch face. After selecting a type from your watch face configuration Activity, you can tap on the complications to see more options.</p>\n<p>The Wear app demonstrates the use of <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/complications/data/ComplicationData\">ComplicationData</a>, <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/complications/datasource/ComplicationDataSourceService\">ComplicationDataSourceService</a>, and <a href=\"https://developer.android.com/reference/kotlin/androidx/wear/complications/data/ComplicationText\">ComplicationText</a>.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearComplicationDataSourcesTestSuite/screenshots/wear-1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearComplicationDataSourcesTestSuite/screenshots/wear-2.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationData",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationData.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationManager",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationManager.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationProviderService",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationProviderService.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ComplicationText",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ComplicationText.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.complications.ProviderUpdateRequester",
     "link": "https://developer.android.com/reference/android/support/wearable/complications/ProviderUpdateRequester.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629313849000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearDrawers",
   "title": "WearDrawers",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 28</li> \n <li>Android Build Tools v29.0.2</li> \n <li>Android Support Repository</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearDrawers/",
   "description": "A simple sample that demonstrates Navigation and Action Drawers, part of Material Design for Wear.",
   "introduction": "<p>Steps for trying out this sample:</p>\n<pre><code>        * Compile and install the wearable app onto your Wear device or emulator.\n        (**Note:** You must install this app directly to your Wear device or emulator.\n        If installed on a phone, it will not be automatically pushed to a paired Wear\n        device, see [here][2] for more info).\n\n        This sample uses the planets in our solar system to demonstrate the two Wear\n        drawer components and concepts relating to [Wear][1] and [Material Design][3]:\n        * Customizes and enables screen/planet changes with the [Navigation Drawer][4]\n        * Adds customized actions to each screen using the [Action Drawer][5]\n\n        [1]: http://developer.android.com/wear/\n        [2]: https://developer.android.com/training/wearables/apps/creating.html#Install\n        [3]: http://www.google.com/design/wear\n        [4]: http://www.google.com/design/spec-wear/components/navigation-drawer.html\n        [5]: http://www.google.com/design/spec-wear/components/action-drawer.html\n</code></pre>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearDrawers/screenshots/wear-round-1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearDrawers/screenshots/wear-round-2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearDrawers/screenshots/wear-round-3.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearDrawers/screenshots/wear-round-4.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.activity.WearableActivity",
     "link": "https://developer.android.com/reference/android/support/wearable/activity/WearableActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.drawer.WearableActionDrawer",
     "link": "https://developer.android.com/reference/android/support/wearable/view/drawer/WearableActionDrawer.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.drawer.WearableDrawerLayout",
     "link": "https://developer.android.com/reference/android/support/wearable/view/drawer/WearableDrawerLayout.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.drawer.WearableNavigationDrawer",
     "link": "https://developer.android.com/reference/android/support/wearable/view/drawer/WearableNavigationDrawer.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1626379889000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearOAuth",
   "title": "Wear OS OAuth",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearOAuth/",
   "description": "",
   "introduction": "<p>Sample demonstrating various forms of OAuth 2.0 authentication on Wear OS.</p>\n<p>The sample demonstrates two possible flows between a Wear OS app and the Android Wear companion app for handling OAuth 2.0 authentication. The sample uses the Google OAuth 2.0 server, but you can use any OAuth server instead.</p>",
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.authentication.OAuthClient",
     "link": "https://developer.android.com/reference/android/support/wearable/authentication/OAuthClient.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.HttpResponse",
     "link": "https://developer.android.com/reference/org/apache/http/HttpResponse.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.client.ClientProtocolException",
     "link": "https://developer.android.com/reference/org/apache/http/client/ClientProtocolException.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.client.HttpClient",
     "link": "https://developer.android.com/reference/org/apache/http/client/HttpClient.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.client.entity.UrlEncodedFormEntity",
     "link": "https://developer.android.com/reference/org/apache/http/client/entity/UrlEncodedFormEntity.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.client.methods.HttpGet",
     "link": "https://developer.android.com/reference/org/apache/http/client/methods/HttpGet.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.client.methods.HttpPost",
     "link": "https://developer.android.com/reference/org/apache/http/client/methods/HttpPost.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.impl.client.DefaultHttpClient",
     "link": "https://developer.android.com/reference/org/apache/http/impl/client/DefaultHttpClient.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.message.BasicNameValuePair",
     "link": "https://developer.android.com/reference/org/apache/http/message/BasicNameValuePair.html"
    },
    {
     "namespace": "android",
     "name": "org.apache.http.util.EntityUtils",
     "link": "https://developer.android.com/reference/org/apache/http/util/EntityUtils.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629325918000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearSpeakerSample",
   "title": "WearSpeakerSample",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 30</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearSpeakerSample/",
   "description": "A sample that shows how you can record voice using the microphone on a wearable and play the recorded voice or an mp3 file, if the wearable device is connected to a speaker (bluetooth or built-in).\nThis sample doesn't have any companion phone app so you need to install this directly on your watch using <code>adb</code> or Android Studio.",
   "icon": "screenshots/1.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.media.AudioTrack",
     "link": "https://developer.android.com/reference/android/media/AudioTrack.html"
    },
    {
     "namespace": "android",
     "name": "android.media.AudioRecord",
     "link": "https://developer.android.com/reference/android/media/AudioRecord.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1628797279000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearStandaloneGoogleSignIn",
   "title": "Wear Google Sign-In",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<p>Please have Android Studio installed and configured. If you're not using Android Studio, you can still follow these instructions but will need to adjust them according to your environment.</p>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearStandaloneGoogleSignIn/",
   "description": "",
   "introduction": "<p>Sample demonstrating Google Sign-In implementation on Wear 2.0, as well as a Google Sign-In button matching Wear material design.</p>\n<p>The button included in this sample should be used as throwaway code for all Wear integrations until the final version lands in Play Services, and maintained there going forward.</p>",
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.Auth",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/Auth"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.signin.GoogleSignInAccount",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInAccount"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.signin.GoogleSignInOptions",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInOptions"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.auth.api.signin.GoogleSignInResult",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/auth/api/signin/GoogleSignInResult"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.common.ConnectionResult",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/common/ConnectionResult"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.common.api.GoogleApiClient",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/common/api/GoogleApiClient"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.common.api.OptionalPendingResult",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/common/api/OptionalPendingResult"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.common.api.ResultCallback",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/common/api/ResultCallback"
    },
    {
     "namespace": "gms",
     "name": "com.google.android.gms.common.api.Status",
     "link": "https://developers.google.com/android/reference/com/google/android/gms/common/api/Status"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1626379889000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearTilesKotlin",
   "title": "Wear Tiles",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "kotlin"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os-samples",
   "branch": "main",
   "path": "WearTilesKotlin/",
   "description": "Demonstrates tiles using the new AndroidX alpha library.",
   "introduction": "<p><a href=\"https://d.android.com/training/articles/wear-tiles\">Tiles</a> provide users with swipeable access to the things they need to know and get done right from their wrist. They are fast to access and convenient, designed to provide users with what they need in the moment, which gives users control over what information and actions they want to see.</p>\n<p>This repository contains a set of sample implementations of Tiles, demonstrating various use cases. Each Tile extends TileProviderService and implements onTileRequest and onResourcesRequest.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearTilesKotlin/app/src/main/res/drawable/tile_goals.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearTilesKotlin/app/src/main/res/drawable/tile_media.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearTilesKotlin/app/src/main/res/drawable/tile_messaging.png",
     "primary": false
    }
   ],
   "apiRefs": [
    {
     "namespace": "android",
     "name": "androidx.wear.tiles.TileProviderService",
     "link": "https://developer.android.com/reference/androidx/wear/tiles/TileProviderService.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629409089000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  },
  {
   "id": "android/wear-os-samples/WearVerifyRemoteApp",
   "title": "WearVerifyRemoteApp",
   "status": "PUBLISHED",
   "level": "INTERMEDIATE",
   "prerequisites": "<ul> \n <li>Android SDK 30</li> \n</ul>",
   "technologies": [
    "android"
   ],
   "categories": [
    "wearable"
   ],
   "languages": [
    "java"
   ],
   "solutions": [
    "mobile"
   ],
   "cloneUrl": "https://github.com/android/wear-os-samples/",
   "github": "android/wear-os",
   "branch": "main",
   "path": "WearVerifyRemoteApp/",
   "description": "Sample demonstrates best practices for checking if connected mobile device has your app installed from a Wear 2.+ standalone app and the other way around.",
   "introduction": "<p>Steps for trying out the sample: * Compile and install the mobile app onto your mobile device or emulator (for mobile scenario). * Compile and install the wearable app onto your Wear device or emulator (for Wear scenario).</p>\n<p>This sample demonstrate best practices for using <code>PhoneTypeHelper</code> and <code>RemoteIntentHelper</code> to check if the mobile version of your app exists from within your Standalone Wear 2.+ app and the other way around. Scenarios:</p>\n<ol> \n <li><p>Launch Wear standalone app to verify if the mobile version is installed. If it is not, you will be able to open the Play Store on the remote mobile device from the app (if it has the Play Store).</p></li> \n <li><p>Launch Mobile app to verify if the Wear version is installed. If it is not, you will be able to open the Play Store on the remote Wear device from the app.</p></li> \n</ol>\n<p>Although there are two apps (Mobile and Wear), each should be looked at as a separate, standalone apps/experiences.</p>",
   "screenshots": [
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearVerifyRemoteApp/screenshots/wear-1.png",
     "primary": true
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearVerifyRemoteApp/screenshots/wear-2.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearVerifyRemoteApp/screenshots/mobile-1.png",
     "primary": false
    },
    {
     "link": "https://raw.github.com/android/wear-os-samples/main/WearVerifyRemoteApp/screenshots/mobile-2.png",
     "primary": false
    }
   ],
   "icon": "screenshots/icon-web.png",
   "apiRefs": [
    {
     "namespace": "android",
     "name": "android.support.wearable.activity.WearableActivity",
     "link": "https://developer.android.com/reference/android/support/wearable/activity/WearableActivity.html"
    },
    {
     "namespace": "android",
     "name": "android.support.wearable.view.ConfirmationOverlay",
     "link": "https://developer.android.com/reference/android/support/wearable/view/ConfirmationOverlay.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.common.api.GoogleApiClient",
     "link": "https://developer.android.com/reference/com/google/android/gms/common/api/GoogleApiClient.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.CapabilityApi",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/CapabilityApi.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.CapabilityInfo",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/CapabilityInfo.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.Node",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/Node.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.gms.wearable.Wearable",
     "link": "https://developer.android.com/reference/com/google/android/gms/wearable/Wearable.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.wearable.intent.RemoteIntent",
     "link": "https://developer.android.com/reference/com/google/android/wearable/intent/RemoteIntent.html"
    },
    {
     "namespace": "android",
     "name": "com.google.android.wearable.playstore.PlayStoreAvailability",
     "link": "https://developer.android.com/reference/com/google/android/wearable/playstore/PlayStoreAvailability.html"
    }
   ],
   "license": {
    "name": "apache2",
    "link": "http://www.apache.org/licenses/LICENSE-2.0.html"
   },
   "lastUpdate": {
    "value": "1629838899000",
    "dateOnly": false,
    "timeZoneShift": 0
   }
  }
 ]
}